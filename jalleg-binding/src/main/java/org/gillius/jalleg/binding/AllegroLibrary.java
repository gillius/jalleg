/*
 * Copyright 2016 Jason Winnebeck
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.gillius.jalleg.binding;
import com.sun.jna.Callback;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.FloatByReference;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.PointerByReference;
import com.sun.jna.ptr.ShortByReference;
import java.nio.ByteBuffer;
import java.nio.FloatBuffer;
import java.nio.IntBuffer;
import java.nio.ShortBuffer;

/**
 * JNA Wrapper for library <b>Allegro</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
@SuppressWarnings({"unused", "WeakerAccess", "PointlessBitwiseExpression"})
public class AllegroLibrary implements Library {
	public static final String JNA_LIBRARY_NAME = "allegro_monolith-5.2";
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(AllegroLibrary.JNA_LIBRARY_NAME);
	static {
		Native.register(AllegroLibrary.class, AllegroLibrary.JNA_NATIVE_LIB);
	}
	public interface ALLEGRO_PIXEL_FORMAT {
		int ALLEGRO_PIXEL_FORMAT_ANY = 0;
		int ALLEGRO_PIXEL_FORMAT_ANY_NO_ALPHA = 1;
		int ALLEGRO_PIXEL_FORMAT_ANY_WITH_ALPHA = 2;
		int ALLEGRO_PIXEL_FORMAT_ANY_15_NO_ALPHA = 3;
		int ALLEGRO_PIXEL_FORMAT_ANY_16_NO_ALPHA = 4;
		int ALLEGRO_PIXEL_FORMAT_ANY_16_WITH_ALPHA = 5;
		int ALLEGRO_PIXEL_FORMAT_ANY_24_NO_ALPHA = 6;
		int ALLEGRO_PIXEL_FORMAT_ANY_32_NO_ALPHA = 7;
		int ALLEGRO_PIXEL_FORMAT_ANY_32_WITH_ALPHA = 8;
		int ALLEGRO_PIXEL_FORMAT_ARGB_8888 = 9;
		int ALLEGRO_PIXEL_FORMAT_RGBA_8888 = 10;
		int ALLEGRO_PIXEL_FORMAT_ARGB_4444 = 11;
		int ALLEGRO_PIXEL_FORMAT_RGB_888 = 12;
		int ALLEGRO_PIXEL_FORMAT_RGB_565 = 13;
		int ALLEGRO_PIXEL_FORMAT_RGB_555 = 14;
		int ALLEGRO_PIXEL_FORMAT_RGBA_5551 = 15;
		int ALLEGRO_PIXEL_FORMAT_ARGB_1555 = 16;
		int ALLEGRO_PIXEL_FORMAT_ABGR_8888 = 17;
		int ALLEGRO_PIXEL_FORMAT_XBGR_8888 = 18;
		int ALLEGRO_PIXEL_FORMAT_BGR_888 = 19;
		int ALLEGRO_PIXEL_FORMAT_BGR_565 = 20;
		int ALLEGRO_PIXEL_FORMAT_BGR_555 = 21;
		int ALLEGRO_PIXEL_FORMAT_RGBX_8888 = 22;
		int ALLEGRO_PIXEL_FORMAT_XRGB_8888 = 23;
		int ALLEGRO_PIXEL_FORMAT_ABGR_F32 = 24;
		int ALLEGRO_PIXEL_FORMAT_ABGR_8888_LE = 25;
		int ALLEGRO_PIXEL_FORMAT_RGBA_4444 = 26;
		int ALLEGRO_PIXEL_FORMAT_SINGLE_CHANNEL_8 = 27;
		int ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT1 = 28;
		int ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT3 = 29;
		int ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT5 = 30;
		int ALLEGRO_NUM_PIXEL_FORMATS = 31;
	}

	public static final int ALLEGRO_MEMORY_BITMAP = 0x0001;
	public static final int _ALLEGRO_KEEP_BITMAP_FORMAT = 0x0002;
	public static final int ALLEGRO_FORCE_LOCKING = 0x0004;
	public static final int ALLEGRO_NO_PRESERVE_TEXTURE = 0x0008;
	public static final int _ALLEGRO_ALPHA_TEST = 0x0010;
	public static final int _ALLEGRO_INTERNAL_OPENGL = 0x0020;
	public static final int ALLEGRO_MIN_LINEAR = 0x0040;
	public static final int ALLEGRO_MAG_LINEAR = 0x0080;
	public static final int ALLEGRO_MIPMAP = 0x0100;
	public static final int _ALLEGRO_NO_PREMULTIPLIED_ALPHA = 0x0200;
	public static final int ALLEGRO_VIDEO_BITMAP = 0x0400;
	public static final int ALLEGRO_CONVERT_BITMAP = 0x1000;
	public static final int ALLEGRO_FLIP_HORIZONTAL = 0x00001;
	public static final int ALLEGRO_FLIP_VERTICAL = 0x00002;
	public interface ALLEGRO_SEEK {
		int ALLEGRO_SEEK_SET = 0;
		int ALLEGRO_SEEK_CUR = 1;
		int ALLEGRO_SEEK_END = 2;
	}

	public static final int ALLEGRO_KEEP_BITMAP_FORMAT = 0x0002;
	public static final int ALLEGRO_NO_PREMULTIPLIED_ALPHA = 0x0200;
	public static final int ALLEGRO_KEEP_INDEX = 0x0800;
	public static final int ALLEGRO_LOCK_READWRITE = 0;
	public static final int ALLEGRO_LOCK_READONLY = 1;
	public static final int ALLEGRO_LOCK_WRITEONLY = 2;
	public interface ALLEGRO_BLEND_MODE {
		int ALLEGRO_ZERO = 0;
		int ALLEGRO_ONE = 1;
		int ALLEGRO_ALPHA = 2;
		int ALLEGRO_INVERSE_ALPHA = 3;
		int ALLEGRO_SRC_COLOR = 4;
		int ALLEGRO_DEST_COLOR = 5;
		int ALLEGRO_INVERSE_SRC_COLOR = 6;
		int ALLEGRO_INVERSE_DEST_COLOR = 7;
		int ALLEGRO_CONST_COLOR = 8;
		int ALLEGRO_INVERSE_CONST_COLOR = 9;
		int ALLEGRO_NUM_BLEND_MODES = 10;
	}

	public interface ALLEGRO_BLEND_OPERATIONS {
		int ALLEGRO_ADD = 0;
		int ALLEGRO_SRC_MINUS_DEST = 1;
		int ALLEGRO_DEST_MINUS_SRC = 2;
		int ALLEGRO_NUM_BLEND_OPERATIONS = 3;
	}

	public static final int ALLEGRO_EVENT_JOYSTICK_AXIS = 1;
	public static final int ALLEGRO_EVENT_JOYSTICK_BUTTON_DOWN = 2;
	public static final int ALLEGRO_EVENT_JOYSTICK_BUTTON_UP = 3;
	public static final int ALLEGRO_EVENT_JOYSTICK_CONFIGURATION = 4;
	public static final int ALLEGRO_EVENT_KEY_DOWN = 10;
	public static final int ALLEGRO_EVENT_KEY_CHAR = 11;
	public static final int ALLEGRO_EVENT_KEY_UP = 12;
	public static final int ALLEGRO_EVENT_MOUSE_AXES = 20;
	public static final int ALLEGRO_EVENT_MOUSE_BUTTON_DOWN = 21;
	public static final int ALLEGRO_EVENT_MOUSE_BUTTON_UP = 22;
	public static final int ALLEGRO_EVENT_MOUSE_ENTER_DISPLAY = 23;
	public static final int ALLEGRO_EVENT_MOUSE_LEAVE_DISPLAY = 24;
	public static final int ALLEGRO_EVENT_MOUSE_WARPED = 25;
	public static final int ALLEGRO_EVENT_TIMER = 30;
	public static final int ALLEGRO_EVENT_DISPLAY_EXPOSE = 40;
	public static final int ALLEGRO_EVENT_DISPLAY_RESIZE = 41;
	public static final int ALLEGRO_EVENT_DISPLAY_CLOSE = 42;
	public static final int ALLEGRO_EVENT_DISPLAY_LOST = 43;
	public static final int ALLEGRO_EVENT_DISPLAY_FOUND = 44;
	public static final int ALLEGRO_EVENT_DISPLAY_SWITCH_IN = 45;
	public static final int ALLEGRO_EVENT_DISPLAY_SWITCH_OUT = 46;
	public static final int ALLEGRO_EVENT_DISPLAY_ORIENTATION = 47;
	public static final int ALLEGRO_EVENT_DISPLAY_HALT_DRAWING = 48;
	public static final int ALLEGRO_EVENT_DISPLAY_RESUME_DRAWING = 49;
	public static final int ALLEGRO_EVENT_TOUCH_BEGIN = 50;
	public static final int ALLEGRO_EVENT_TOUCH_END = 51;
	public static final int ALLEGRO_EVENT_TOUCH_MOVE = 52;
	public static final int ALLEGRO_EVENT_TOUCH_CANCEL = 53;
	public static final int ALLEGRO_EVENT_DISPLAY_CONNECTED = 60;
	public static final int ALLEGRO_EVENT_DISPLAY_DISCONNECTED = 61;
	public static final int ALLEGRO_WINDOWED = 1 << 0;
	public static final int ALLEGRO_FULLSCREEN = 1 << 1;
	public static final int ALLEGRO_OPENGL = 1 << 2;
	public static final int ALLEGRO_DIRECT3D_INTERNAL = 1 << 3;
	public static final int ALLEGRO_RESIZABLE = 1 << 4;
	public static final int ALLEGRO_FRAMELESS = 1 << 5;
	public static final int ALLEGRO_NOFRAME = (int)AllegroLibrary.ALLEGRO_FRAMELESS;
	public static final int ALLEGRO_GENERATE_EXPOSE_EVENTS = 1 << 6;
	public static final int ALLEGRO_OPENGL_3_0 = 1 << 7;
	public static final int ALLEGRO_OPENGL_FORWARD_COMPATIBLE = 1 << 8;
	public static final int ALLEGRO_FULLSCREEN_WINDOW = 1 << 9;
	public static final int ALLEGRO_MINIMIZED = 1 << 10;
	public static final int ALLEGRO_PROGRAMMABLE_PIPELINE = 1 << 11;
	public static final int ALLEGRO_GTK_TOPLEVEL_INTERNAL = 1 << 12;
	public static final int ALLEGRO_MAXIMIZED = 1 << 13;
	public static final int ALLEGRO_OPENGL_ES_PROFILE = 1 << 14;
	public interface ALLEGRO_DISPLAY_OPTIONS {
		int ALLEGRO_RED_SIZE = 0;
		int ALLEGRO_GREEN_SIZE = 1;
		int ALLEGRO_BLUE_SIZE = 2;
		int ALLEGRO_ALPHA_SIZE = 3;
		int ALLEGRO_RED_SHIFT = 4;
		int ALLEGRO_GREEN_SHIFT = 5;
		int ALLEGRO_BLUE_SHIFT = 6;
		int ALLEGRO_ALPHA_SHIFT = 7;
		int ALLEGRO_ACC_RED_SIZE = 8;
		int ALLEGRO_ACC_GREEN_SIZE = 9;
		int ALLEGRO_ACC_BLUE_SIZE = 10;
		int ALLEGRO_ACC_ALPHA_SIZE = 11;
		int ALLEGRO_STEREO = 12;
		int ALLEGRO_AUX_BUFFERS = 13;
		int ALLEGRO_COLOR_SIZE = 14;
		int ALLEGRO_DEPTH_SIZE = 15;
		int ALLEGRO_STENCIL_SIZE = 16;
		int ALLEGRO_SAMPLE_BUFFERS = 17;
		int ALLEGRO_SAMPLES = 18;
		int ALLEGRO_RENDER_METHOD = 19;
		int ALLEGRO_FLOAT_COLOR = 20;
		int ALLEGRO_FLOAT_DEPTH = 21;
		int ALLEGRO_SINGLE_BUFFER = 22;
		int ALLEGRO_SWAP_METHOD = 23;
		int ALLEGRO_COMPATIBLE_DISPLAY = 24;
		int ALLEGRO_UPDATE_DISPLAY_REGION = 25;
		int ALLEGRO_VSYNC = 26;
		int ALLEGRO_MAX_BITMAP_SIZE = 27;
		int ALLEGRO_SUPPORT_NPOT_BITMAP = 28;
		int ALLEGRO_CAN_DRAW_INTO_BITMAP = 29;
		int ALLEGRO_SUPPORT_SEPARATE_ALPHA = 30;
		int ALLEGRO_AUTO_CONVERT_BITMAPS = 31;
		int ALLEGRO_SUPPORTED_ORIENTATIONS = 32;
		int ALLEGRO_OPENGL_MAJOR_VERSION = 33;
		int ALLEGRO_OPENGL_MINOR_VERSION = 34;
		int ALLEGRO_DISPLAY_OPTIONS_COUNT = 35;
	}

	public static final int ALLEGRO_DONTCARE = 0;
	public static final int ALLEGRO_REQUIRE = 1;
	public static final int ALLEGRO_SUGGEST = 2;
	public interface ALLEGRO_DISPLAY_ORIENTATION {
		int ALLEGRO_DISPLAY_ORIENTATION_UNKNOWN = 0;
		int ALLEGRO_DISPLAY_ORIENTATION_0_DEGREES = 1;
		int ALLEGRO_DISPLAY_ORIENTATION_90_DEGREES = 2;
		int ALLEGRO_DISPLAY_ORIENTATION_180_DEGREES = 4;
		int ALLEGRO_DISPLAY_ORIENTATION_270_DEGREES = 8;
		int ALLEGRO_DISPLAY_ORIENTATION_PORTRAIT = 5;
		int ALLEGRO_DISPLAY_ORIENTATION_LANDSCAPE = 10;
		int ALLEGRO_DISPLAY_ORIENTATION_ALL = 15;
		int ALLEGRO_DISPLAY_ORIENTATION_FACE_UP = 16;
		int ALLEGRO_DISPLAY_ORIENTATION_FACE_DOWN = 32;
	}

	public static final int _ALLEGRO_PRIM_MAX_USER_ATTR = 10;
	public interface ALLEGRO_FILE_MODE {
		int ALLEGRO_FILEMODE_READ = 1;
		int ALLEGRO_FILEMODE_WRITE = 1 << 1;
		int ALLEGRO_FILEMODE_EXECUTE = 1 << 2;
		int ALLEGRO_FILEMODE_HIDDEN = 1 << 3;
		int ALLEGRO_FILEMODE_ISFILE = 1 << 4;
		int ALLEGRO_FILEMODE_ISDIR = 1 << 5;
	}

	public interface ALLEGRO_FOR_EACH_FS_ENTRY_RESULT {
		int ALLEGRO_FOR_EACH_FS_ENTRY_ERROR = -1;
		int ALLEGRO_FOR_EACH_FS_ENTRY_OK = 0;
		int ALLEGRO_FOR_EACH_FS_ENTRY_SKIP = 1;
		int ALLEGRO_FOR_EACH_FS_ENTRY_STOP = 2;
	}

	public interface ALLEGRO_JOYFLAGS {
		int ALLEGRO_JOYFLAG_DIGITAL = 0x01;
		int ALLEGRO_JOYFLAG_ANALOGUE = 0x02;
	}

	public static final int ALLEGRO_KEY_A = 1;
	public static final int ALLEGRO_KEY_B = 2;
	public static final int ALLEGRO_KEY_C = 3;
	public static final int ALLEGRO_KEY_D = 4;
	public static final int ALLEGRO_KEY_E = 5;
	public static final int ALLEGRO_KEY_F = 6;
	public static final int ALLEGRO_KEY_G = 7;
	public static final int ALLEGRO_KEY_H = 8;
	public static final int ALLEGRO_KEY_I = 9;
	public static final int ALLEGRO_KEY_J = 10;
	public static final int ALLEGRO_KEY_K = 11;
	public static final int ALLEGRO_KEY_L = 12;
	public static final int ALLEGRO_KEY_M = 13;
	public static final int ALLEGRO_KEY_N = 14;
	public static final int ALLEGRO_KEY_O = 15;
	public static final int ALLEGRO_KEY_P = 16;
	public static final int ALLEGRO_KEY_Q = 17;
	public static final int ALLEGRO_KEY_R = 18;
	public static final int ALLEGRO_KEY_S = 19;
	public static final int ALLEGRO_KEY_T = 20;
	public static final int ALLEGRO_KEY_U = 21;
	public static final int ALLEGRO_KEY_V = 22;
	public static final int ALLEGRO_KEY_W = 23;
	public static final int ALLEGRO_KEY_X = 24;
	public static final int ALLEGRO_KEY_Y = 25;
	public static final int ALLEGRO_KEY_Z = 26;
	public static final int ALLEGRO_KEY_0 = 27;
	public static final int ALLEGRO_KEY_1 = 28;
	public static final int ALLEGRO_KEY_2 = 29;
	public static final int ALLEGRO_KEY_3 = 30;
	public static final int ALLEGRO_KEY_4 = 31;
	public static final int ALLEGRO_KEY_5 = 32;
	public static final int ALLEGRO_KEY_6 = 33;
	public static final int ALLEGRO_KEY_7 = 34;
	public static final int ALLEGRO_KEY_8 = 35;
	public static final int ALLEGRO_KEY_9 = 36;
	public static final int ALLEGRO_KEY_PAD_0 = 37;
	public static final int ALLEGRO_KEY_PAD_1 = 38;
	public static final int ALLEGRO_KEY_PAD_2 = 39;
	public static final int ALLEGRO_KEY_PAD_3 = 40;
	public static final int ALLEGRO_KEY_PAD_4 = 41;
	public static final int ALLEGRO_KEY_PAD_5 = 42;
	public static final int ALLEGRO_KEY_PAD_6 = 43;
	public static final int ALLEGRO_KEY_PAD_7 = 44;
	public static final int ALLEGRO_KEY_PAD_8 = 45;
	public static final int ALLEGRO_KEY_PAD_9 = 46;
	public static final int ALLEGRO_KEY_F1 = 47;
	public static final int ALLEGRO_KEY_F2 = 48;
	public static final int ALLEGRO_KEY_F3 = 49;
	public static final int ALLEGRO_KEY_F4 = 50;
	public static final int ALLEGRO_KEY_F5 = 51;
	public static final int ALLEGRO_KEY_F6 = 52;
	public static final int ALLEGRO_KEY_F7 = 53;
	public static final int ALLEGRO_KEY_F8 = 54;
	public static final int ALLEGRO_KEY_F9 = 55;
	public static final int ALLEGRO_KEY_F10 = 56;
	public static final int ALLEGRO_KEY_F11 = 57;
	public static final int ALLEGRO_KEY_F12 = 58;
	public static final int ALLEGRO_KEY_ESCAPE = 59;
	public static final int ALLEGRO_KEY_TILDE = 60;
	public static final int ALLEGRO_KEY_MINUS = 61;
	public static final int ALLEGRO_KEY_EQUALS = 62;
	public static final int ALLEGRO_KEY_BACKSPACE = 63;
	public static final int ALLEGRO_KEY_TAB = 64;
	public static final int ALLEGRO_KEY_OPENBRACE = 65;
	public static final int ALLEGRO_KEY_CLOSEBRACE = 66;
	public static final int ALLEGRO_KEY_ENTER = 67;
	public static final int ALLEGRO_KEY_SEMICOLON = 68;
	public static final int ALLEGRO_KEY_QUOTE = 69;
	public static final int ALLEGRO_KEY_BACKSLASH = 70;
	public static final int ALLEGRO_KEY_BACKSLASH2 = 71;
	public static final int ALLEGRO_KEY_COMMA = 72;
	public static final int ALLEGRO_KEY_FULLSTOP = 73;
	public static final int ALLEGRO_KEY_SLASH = 74;
	public static final int ALLEGRO_KEY_SPACE = 75;
	public static final int ALLEGRO_KEY_INSERT = 76;
	public static final int ALLEGRO_KEY_DELETE = 77;
	public static final int ALLEGRO_KEY_HOME = 78;
	public static final int ALLEGRO_KEY_END = 79;
	public static final int ALLEGRO_KEY_PGUP = 80;
	public static final int ALLEGRO_KEY_PGDN = 81;
	public static final int ALLEGRO_KEY_LEFT = 82;
	public static final int ALLEGRO_KEY_RIGHT = 83;
	public static final int ALLEGRO_KEY_UP = 84;
	public static final int ALLEGRO_KEY_DOWN = 85;
	public static final int ALLEGRO_KEY_PAD_SLASH = 86;
	public static final int ALLEGRO_KEY_PAD_ASTERISK = 87;
	public static final int ALLEGRO_KEY_PAD_MINUS = 88;
	public static final int ALLEGRO_KEY_PAD_PLUS = 89;
	public static final int ALLEGRO_KEY_PAD_DELETE = 90;
	public static final int ALLEGRO_KEY_PAD_ENTER = 91;
	public static final int ALLEGRO_KEY_PRINTSCREEN = 92;
	public static final int ALLEGRO_KEY_PAUSE = 93;
	public static final int ALLEGRO_KEY_ABNT_C1 = 94;
	public static final int ALLEGRO_KEY_YEN = 95;
	public static final int ALLEGRO_KEY_KANA = 96;
	public static final int ALLEGRO_KEY_CONVERT = 97;
	public static final int ALLEGRO_KEY_NOCONVERT = 98;
	public static final int ALLEGRO_KEY_AT = 99;
	public static final int ALLEGRO_KEY_CIRCUMFLEX = 100;
	public static final int ALLEGRO_KEY_COLON2 = 101;
	public static final int ALLEGRO_KEY_KANJI = 102;
	public static final int ALLEGRO_KEY_PAD_EQUALS = 103;
	public static final int ALLEGRO_KEY_BACKQUOTE = 104;
	public static final int ALLEGRO_KEY_SEMICOLON2 = 105;
	public static final int ALLEGRO_KEY_COMMAND = 106;
	public static final int ALLEGRO_KEY_BACK = 107;
	public static final int ALLEGRO_KEY_VOLUME_UP = 108;
	public static final int ALLEGRO_KEY_VOLUME_DOWN = 109;
	public static final int ALLEGRO_KEY_SEARCH = 110;
	public static final int ALLEGRO_KEY_DPAD_CENTER = 111;
	public static final int ALLEGRO_KEY_BUTTON_X = 112;
	public static final int ALLEGRO_KEY_BUTTON_Y = 113;
	public static final int ALLEGRO_KEY_DPAD_UP = 114;
	public static final int ALLEGRO_KEY_DPAD_DOWN = 115;
	public static final int ALLEGRO_KEY_DPAD_LEFT = 116;
	public static final int ALLEGRO_KEY_DPAD_RIGHT = 117;
	public static final int ALLEGRO_KEY_SELECT = 118;
	public static final int ALLEGRO_KEY_START = 119;
	public static final int ALLEGRO_KEY_BUTTON_L1 = 120;
	public static final int ALLEGRO_KEY_BUTTON_R1 = 121;
	public static final int ALLEGRO_KEY_BUTTON_L2 = 122;
	public static final int ALLEGRO_KEY_BUTTON_R2 = 123;
	public static final int ALLEGRO_KEY_BUTTON_A = 124;
	public static final int ALLEGRO_KEY_BUTTON_B = 125;
	public static final int ALLEGRO_KEY_THUMBL = 126;
	public static final int ALLEGRO_KEY_THUMBR = 127;
	public static final int ALLEGRO_KEY_UNKNOWN = 128;
	public static final int ALLEGRO_KEY_MODIFIERS = 215;
	public static final int ALLEGRO_KEY_LSHIFT = 215;
	public static final int ALLEGRO_KEY_RSHIFT = 216;
	public static final int ALLEGRO_KEY_LCTRL = 217;
	public static final int ALLEGRO_KEY_RCTRL = 218;
	public static final int ALLEGRO_KEY_ALT = 219;
	public static final int ALLEGRO_KEY_ALTGR = 220;
	public static final int ALLEGRO_KEY_LWIN = 221;
	public static final int ALLEGRO_KEY_RWIN = 222;
	public static final int ALLEGRO_KEY_MENU = 223;
	public static final int ALLEGRO_KEY_SCROLLLOCK = 224;
	public static final int ALLEGRO_KEY_NUMLOCK = 225;
	public static final int ALLEGRO_KEY_CAPSLOCK = 226;
	public static final int ALLEGRO_KEY_MAX = 227;
	public static final int ALLEGRO_KEYMOD_SHIFT = 0x00001;
	public static final int ALLEGRO_KEYMOD_CTRL = 0x00002;
	public static final int ALLEGRO_KEYMOD_ALT = 0x00004;
	public static final int ALLEGRO_KEYMOD_LWIN = 0x00008;
	public static final int ALLEGRO_KEYMOD_RWIN = 0x00010;
	public static final int ALLEGRO_KEYMOD_MENU = 0x00020;
	public static final int ALLEGRO_KEYMOD_ALTGR = 0x00040;
	public static final int ALLEGRO_KEYMOD_COMMAND = 0x00080;
	public static final int ALLEGRO_KEYMOD_SCROLLLOCK = 0x00100;
	public static final int ALLEGRO_KEYMOD_NUMLOCK = 0x00200;
	public static final int ALLEGRO_KEYMOD_CAPSLOCK = 0x00400;
	public static final int ALLEGRO_KEYMOD_INALTSEQ = 0x00800;
	public static final int ALLEGRO_KEYMOD_ACCENT1 = 0x01000;
	public static final int ALLEGRO_KEYMOD_ACCENT2 = 0x02000;
	public static final int ALLEGRO_KEYMOD_ACCENT3 = 0x04000;
	public static final int ALLEGRO_KEYMOD_ACCENT4 = 0x08000;
	public static final int ALLEGRO_DEFAULT_DISPLAY_ADAPTER = -1;
	public interface ALLEGRO_SYSTEM_MOUSE_CURSOR {
		int ALLEGRO_SYSTEM_MOUSE_CURSOR_NONE = 0;
		int ALLEGRO_SYSTEM_MOUSE_CURSOR_DEFAULT = 1;
		int ALLEGRO_SYSTEM_MOUSE_CURSOR_ARROW = 2;
		int ALLEGRO_SYSTEM_MOUSE_CURSOR_BUSY = 3;
		int ALLEGRO_SYSTEM_MOUSE_CURSOR_QUESTION = 4;
		int ALLEGRO_SYSTEM_MOUSE_CURSOR_EDIT = 5;
		int ALLEGRO_SYSTEM_MOUSE_CURSOR_MOVE = 6;
		int ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_N = 7;
		int ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_W = 8;
		int ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_S = 9;
		int ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_E = 10;
		int ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_NW = 11;
		int ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_SW = 12;
		int ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_SE = 13;
		int ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_NE = 14;
		int ALLEGRO_SYSTEM_MOUSE_CURSOR_PROGRESS = 15;
		int ALLEGRO_SYSTEM_MOUSE_CURSOR_PRECISION = 16;
		int ALLEGRO_SYSTEM_MOUSE_CURSOR_LINK = 17;
		int ALLEGRO_SYSTEM_MOUSE_CURSOR_ALT_SELECT = 18;
		int ALLEGRO_SYSTEM_MOUSE_CURSOR_UNAVAILABLE = 19;
		int ALLEGRO_NUM_SYSTEM_MOUSE_CURSORS = 20;
	}

	public interface ALLEGRO_RENDER_STATE {
		int ALLEGRO_ALPHA_TEST = 0x0010;
		int ALLEGRO_WRITE_MASK = (0x0010 + 1);
		int ALLEGRO_DEPTH_TEST = (0x0010 + 2);
		int ALLEGRO_DEPTH_FUNCTION = (0x0010 + 3);
		int ALLEGRO_ALPHA_FUNCTION = (0x0010 + 4);
		int ALLEGRO_ALPHA_TEST_VALUE = (0x0010 + 5);
	}

	public interface ALLEGRO_RENDER_FUNCTION {
		int ALLEGRO_RENDER_NEVER = 0;
		int ALLEGRO_RENDER_ALWAYS = 1;
		int ALLEGRO_RENDER_LESS = 2;
		int ALLEGRO_RENDER_EQUAL = 3;
		int ALLEGRO_RENDER_LESS_EQUAL = 4;
		int ALLEGRO_RENDER_GREATER = 5;
		int ALLEGRO_RENDER_NOT_EQUAL = 6;
		int ALLEGRO_RENDER_GREATER_EQUAL = 7;
	}

	public interface ALLEGRO_WRITE_MASK_FLAGS {
		int ALLEGRO_MASK_RED = 1 << 0;
		int ALLEGRO_MASK_GREEN = 1 << 1;
		int ALLEGRO_MASK_BLUE = 1 << 2;
		int ALLEGRO_MASK_ALPHA = 1 << 3;
		int ALLEGRO_MASK_DEPTH = 1 << 4;
		int ALLEGRO_MASK_RGB = (ALLEGRO_WRITE_MASK_FLAGS.ALLEGRO_MASK_RED | ALLEGRO_WRITE_MASK_FLAGS.ALLEGRO_MASK_GREEN | ALLEGRO_WRITE_MASK_FLAGS.ALLEGRO_MASK_BLUE);
		int ALLEGRO_MASK_RGBA = (ALLEGRO_WRITE_MASK_FLAGS.ALLEGRO_MASK_RGB | ALLEGRO_WRITE_MASK_FLAGS.ALLEGRO_MASK_ALPHA);
	}

	public interface ALLEGRO_SHADER_TYPE {
		int ALLEGRO_VERTEX_SHADER = 1;
		int ALLEGRO_PIXEL_SHADER = 2;
	}

	public interface ALLEGRO_SHADER_PLATFORM {
		int ALLEGRO_SHADER_AUTO = 0;
		int ALLEGRO_SHADER_GLSL = 1;
		int ALLEGRO_SHADER_HLSL = 2;
	}

	public static final int ALLEGRO_RESOURCES_PATH = 0;
	public static final int ALLEGRO_TEMP_PATH = 1;
	public static final int ALLEGRO_USER_DATA_PATH = 2;
	public static final int ALLEGRO_USER_HOME_PATH = 3;
	public static final int ALLEGRO_USER_SETTINGS_PATH = 4;
	public static final int ALLEGRO_USER_DOCUMENTS_PATH = 5;
	public static final int ALLEGRO_EXENAME_PATH = 6;
	public static final int ALLEGRO_LAST_PATH = 7;
	public interface ALLEGRO_STATE_FLAGS {
		int ALLEGRO_STATE_NEW_DISPLAY_PARAMETERS = 0x0001;
		int ALLEGRO_STATE_NEW_BITMAP_PARAMETERS = 0x0002;
		int ALLEGRO_STATE_DISPLAY = 0x0004;
		int ALLEGRO_STATE_TARGET_BITMAP = 0x0008;
		int ALLEGRO_STATE_BLENDER = 0x0010;
		int ALLEGRO_STATE_NEW_FILE_INTERFACE = 0x0020;
		int ALLEGRO_STATE_TRANSFORM = 0x0040;
		int ALLEGRO_STATE_PROJECTION_TRANSFORM = 0x0100;
		int ALLEGRO_STATE_BITMAP = ALLEGRO_STATE_FLAGS.ALLEGRO_STATE_TARGET_BITMAP + ALLEGRO_STATE_FLAGS.ALLEGRO_STATE_NEW_BITMAP_PARAMETERS;
		int ALLEGRO_STATE_ALL = 0xffff;
	}

	public static final int ALLEGRO_VERSION = (int)5;
	public static final int ALLEGRO_SUB_VERSION = (int)2;
	public static final int ALLEGRO_WIP_VERSION = (int)0;
	public static final int ALLEGRO_UNSTABLE_BIT = (int)0;
	public static final int ALLEGRO_RELEASE_NUMBER = (int)1;
	public static final String ALLEGRO_VERSION_STR = (String)"5.2.0";
	public static final String ALLEGRO_DATE_STR = (String)"2016";
	public static final int ALLEGRO_DATE = (int)20160401;
	public static final int ALLEGRO_VERSION_INT = (int)((5 << 24) | (2 << 16) | (0 << 8) | 1 | 0);
	public static final double ALLEGRO_PI = (double)3.14159265358979323846;
	public static final char ALLEGRO_NATIVE_PATH_SEP = (char)'\\';
	public static final char ALLEGRO_NATIVE_DRIVE_SEP = (char)':';
	public static final int ALLEGRO_NEW_WINDOW_TITLE_MAX_SIZE = (int)255;
	public static final int EOF = (int)(-1);
	public static final int _AL_MAX_JOYSTICK_AXES = (int)3;
	public static final int _AL_MAX_JOYSTICK_STICKS = (int)16;
	public static final int _AL_MAX_JOYSTICK_BUTTONS = (int)32;
	public static final int ALLEGRO_MOUSE_MAX_EXTRA_AXES = (int)4;
	public static final int ALLEGRO_TOUCH_INPUT_MAX_TOUCH_COUNT = (int)16;
	public static final String ALLEGRO_SHADER_VAR_COLOR = (String)"al_color";
	public static final String ALLEGRO_SHADER_VAR_POS = (String)"al_pos";
	public static final String ALLEGRO_SHADER_VAR_PROJVIEW_MATRIX = (String)"al_projview_matrix";
	public static final String ALLEGRO_SHADER_VAR_TEX = (String)"al_tex";
	public static final String ALLEGRO_SHADER_VAR_TEXCOORD = (String)"al_texcoord";
	public static final String ALLEGRO_SHADER_VAR_TEX_MATRIX = (String)"al_tex_matrix";
	public static final String ALLEGRO_SHADER_VAR_USER_ATTR = (String)"al_user_attr_";
	public static final String ALLEGRO_SHADER_VAR_USE_TEX = (String)"al_use_tex";
	public static final String ALLEGRO_SHADER_VAR_USE_TEX_MATRIX = (String)"al_use_tex_matrix";
	public interface al_run_main_arg1_callback extends Callback {
		int apply(int int1, PointerByReference charPtrPtr1);
	}

	public interface ALLEGRO_IIO_LOADER_FUNCTION extends Callback {
		PointerByReference apply(Pointer filename, int flags);
	}

	public interface ALLEGRO_IIO_FS_LOADER_FUNCTION extends Callback {
		PointerByReference apply(Pointer fp, int flags);
	}

	public interface ALLEGRO_IIO_SAVER_FUNCTION extends Callback {
		byte apply(Pointer filename, Pointer bitmap);
	}

	public interface ALLEGRO_IIO_FS_SAVER_FUNCTION extends Callback {
		byte apply(Pointer fp, Pointer bitmap);
	}

	public interface ALLEGRO_IIO_IDENTIFIER_FUNCTION extends Callback {
		byte apply(Pointer f);
	}

	public interface al_emit_user_event_dtor_callback extends Callback {
		void apply(ALLEGRO_USER_EVENT ALLEGRO_USER_EVENTPtr1);
	}

	public interface _al_user_assert_handler_callback extends Callback {
		void apply(Pointer expr, Pointer file, int line, Pointer func);
	}

	public interface al_register_assert_handler_handler_callback extends Callback {
		void apply(Pointer expr, Pointer file, int line, Pointer func);
	}

	public interface al_register_trace_handler_handler_callback extends Callback {
		void apply(Pointer charPtr1);
	}

	public interface al_for_each_fs_entry_callback_callback extends Callback {
		int apply(ALLEGRO_FS_ENTRY entry, Pointer extra);
	}

	public interface al_install_system_atexit_ptr_callback_arg1_callback extends Callback {
		void apply();
	}

	public interface al_install_system_atexit_ptr_callback extends Callback {
		int apply(AllegroLibrary.al_install_system_atexit_ptr_callback_arg1_callback arg1);
	}

	public interface al_create_thread_proc_callback extends Callback {
		Pointer apply(Pointer thread, Pointer arg);
	}

	public interface al_run_detached_thread_proc_callback extends Callback {
		Pointer apply(Pointer arg);
	}

	public static native int al_get_allegro_version();
	public static native int al_run_main(int argc, PointerByReference argv, AllegroLibrary.al_run_main_arg1_callback arg1);
	public static native double al_get_time();
	public static native void al_rest(double seconds);
	public static native void al_init_timeout(ALLEGRO_TIMEOUT timeout, double seconds);
	public static native ALLEGRO_COLOR al_map_rgb(byte r, byte g, byte b);
	public static native ALLEGRO_COLOR al_map_rgba(byte r, byte g, byte b, byte a);
	public static native ALLEGRO_COLOR al_map_rgb_f(float r, float g, float b);
	public static native ALLEGRO_COLOR al_map_rgba_f(float r, float g, float b, float a);
	public static native ALLEGRO_COLOR al_premul_rgba(byte r, byte g, byte b, byte a);
	public static native ALLEGRO_COLOR al_premul_rgba_f(float r, float g, float b, float a);
	@Deprecated 
	public static native void al_unmap_rgb(ALLEGRO_COLOR color, Pointer r, Pointer g, Pointer b);
	public static native void al_unmap_rgb(ALLEGRO_COLOR color, ByteBuffer r, ByteBuffer g, ByteBuffer b);
	@Deprecated 
	public static native void al_unmap_rgba(ALLEGRO_COLOR color, Pointer r, Pointer g, Pointer b, Pointer a);
	public static native void al_unmap_rgba(ALLEGRO_COLOR color, ByteBuffer r, ByteBuffer g, ByteBuffer b, ByteBuffer a);
	@Deprecated 
	public static native void al_unmap_rgb_f(ALLEGRO_COLOR color, FloatByReference r, FloatByReference g, FloatByReference b);
	public static native void al_unmap_rgb_f(ALLEGRO_COLOR color, FloatBuffer r, FloatBuffer g, FloatBuffer b);
	@Deprecated 
	public static native void al_unmap_rgba_f(ALLEGRO_COLOR color, FloatByReference r, FloatByReference g, FloatByReference b, FloatByReference a);
	public static native void al_unmap_rgba_f(ALLEGRO_COLOR color, FloatBuffer r, FloatBuffer g, FloatBuffer b, FloatBuffer a);
	public static native int al_get_pixel_size(int format);
	public static native int al_get_pixel_format_bits(int format);
	public static native int al_get_pixel_block_size(int format);
	public static native int al_get_pixel_block_width(int format);
	public static native int al_get_pixel_block_height(int format);
	public static native void al_set_new_bitmap_format(int format);
	public static native void al_set_new_bitmap_flags(int flags);
	public static native int al_get_new_bitmap_format();
	public static native int al_get_new_bitmap_flags();
	public static native void al_add_new_bitmap_flag(int flag);
	@Deprecated 
	public static native int al_get_bitmap_width(Pointer bitmap);
	public static native int al_get_bitmap_width(PointerByReference bitmap);
	@Deprecated 
	public static native int al_get_bitmap_height(Pointer bitmap);
	public static native int al_get_bitmap_height(PointerByReference bitmap);
	@Deprecated 
	public static native int al_get_bitmap_format(Pointer bitmap);
	public static native int al_get_bitmap_format(PointerByReference bitmap);
	@Deprecated 
	public static native int al_get_bitmap_flags(Pointer bitmap);
	public static native int al_get_bitmap_flags(PointerByReference bitmap);
	public static native PointerByReference al_create_bitmap(int w, int h);
	@Deprecated 
	public static native void al_destroy_bitmap(Pointer bitmap);
	public static native void al_destroy_bitmap(PointerByReference bitmap);
	public static native void al_put_pixel(int x, int y, ALLEGRO_COLOR color);
	public static native void al_put_blended_pixel(int x, int y, ALLEGRO_COLOR color);
	@Deprecated 
	public static native ALLEGRO_COLOR al_get_pixel(Pointer bitmap, int x, int y);
	public static native ALLEGRO_COLOR al_get_pixel(PointerByReference bitmap, int x, int y);
	@Deprecated 
	public static native void al_convert_mask_to_alpha(Pointer bitmap, ALLEGRO_COLOR mask_color);
	public static native void al_convert_mask_to_alpha(PointerByReference bitmap, ALLEGRO_COLOR mask_color);
	public static native void al_set_clipping_rectangle(int x, int y, int width, int height);
	public static native void al_reset_clipping_rectangle();
	@Deprecated 
	public static native void al_get_clipping_rectangle(IntByReference x, IntByReference y, IntByReference w, IntByReference h);
	public static native void al_get_clipping_rectangle(IntBuffer x, IntBuffer y, IntBuffer w, IntBuffer h);
	@Deprecated 
	public static native PointerByReference al_create_sub_bitmap(Pointer parent, int x, int y, int w, int h);
	public static native PointerByReference al_create_sub_bitmap(PointerByReference parent, int x, int y, int w, int h);
	@Deprecated 
	public static native byte al_is_sub_bitmap(Pointer bitmap);
	public static native byte al_is_sub_bitmap(PointerByReference bitmap);
	@Deprecated 
	public static native PointerByReference al_get_parent_bitmap(Pointer bitmap);
	public static native PointerByReference al_get_parent_bitmap(PointerByReference bitmap);
	@Deprecated 
	public static native int al_get_bitmap_x(Pointer bitmap);
	public static native int al_get_bitmap_x(PointerByReference bitmap);
	@Deprecated 
	public static native int al_get_bitmap_y(Pointer bitmap);
	public static native int al_get_bitmap_y(PointerByReference bitmap);
	@Deprecated 
	public static native void al_reparent_bitmap(Pointer bitmap, Pointer parent, int x, int y, int w, int h);
	public static native void al_reparent_bitmap(PointerByReference bitmap, PointerByReference parent, int x, int y, int w, int h);
	@Deprecated 
	public static native PointerByReference al_clone_bitmap(Pointer bitmap);
	public static native PointerByReference al_clone_bitmap(PointerByReference bitmap);
	@Deprecated 
	public static native void al_convert_bitmap(Pointer bitmap);
	public static native void al_convert_bitmap(PointerByReference bitmap);
	public static native void al_convert_memory_bitmaps();
	@Deprecated 
	public static native void al_draw_bitmap(Pointer bitmap, float dx, float dy, int flags);
	public static native void al_draw_bitmap(PointerByReference bitmap, float dx, float dy, int flags);
	@Deprecated 
	public static native void al_draw_bitmap_region(Pointer bitmap, float sx, float sy, float sw, float sh, float dx, float dy, int flags);
	public static native void al_draw_bitmap_region(PointerByReference bitmap, float sx, float sy, float sw, float sh, float dx, float dy, int flags);
	@Deprecated 
	public static native void al_draw_scaled_bitmap(Pointer bitmap, float sx, float sy, float sw, float sh, float dx, float dy, float dw, float dh, int flags);
	public static native void al_draw_scaled_bitmap(PointerByReference bitmap, float sx, float sy, float sw, float sh, float dx, float dy, float dw, float dh, int flags);
	@Deprecated 
	public static native void al_draw_rotated_bitmap(Pointer bitmap, float cx, float cy, float dx, float dy, float angle, int flags);
	public static native void al_draw_rotated_bitmap(PointerByReference bitmap, float cx, float cy, float dx, float dy, float angle, int flags);
	@Deprecated 
	public static native void al_draw_scaled_rotated_bitmap(Pointer bitmap, float cx, float cy, float dx, float dy, float xscale, float yscale, float angle, int flags);
	public static native void al_draw_scaled_rotated_bitmap(PointerByReference bitmap, float cx, float cy, float dx, float dy, float xscale, float yscale, float angle, int flags);
	@Deprecated 
	public static native void al_draw_tinted_bitmap(Pointer bitmap, ALLEGRO_COLOR tint, float dx, float dy, int flags);
	public static native void al_draw_tinted_bitmap(PointerByReference bitmap, ALLEGRO_COLOR tint, float dx, float dy, int flags);
	@Deprecated 
	public static native void al_draw_tinted_bitmap_region(Pointer bitmap, ALLEGRO_COLOR tint, float sx, float sy, float sw, float sh, float dx, float dy, int flags);
	public static native void al_draw_tinted_bitmap_region(PointerByReference bitmap, ALLEGRO_COLOR tint, float sx, float sy, float sw, float sh, float dx, float dy, int flags);
	@Deprecated 
	public static native void al_draw_tinted_scaled_bitmap(Pointer bitmap, ALLEGRO_COLOR tint, float sx, float sy, float sw, float sh, float dx, float dy, float dw, float dh, int flags);
	public static native void al_draw_tinted_scaled_bitmap(PointerByReference bitmap, ALLEGRO_COLOR tint, float sx, float sy, float sw, float sh, float dx, float dy, float dw, float dh, int flags);
	@Deprecated 
	public static native void al_draw_tinted_rotated_bitmap(Pointer bitmap, ALLEGRO_COLOR tint, float cx, float cy, float dx, float dy, float angle, int flags);
	public static native void al_draw_tinted_rotated_bitmap(PointerByReference bitmap, ALLEGRO_COLOR tint, float cx, float cy, float dx, float dy, float angle, int flags);
	@Deprecated 
	public static native void al_draw_tinted_scaled_rotated_bitmap(Pointer bitmap, ALLEGRO_COLOR tint, float cx, float cy, float dx, float dy, float xscale, float yscale, float angle, int flags);
	public static native void al_draw_tinted_scaled_rotated_bitmap(PointerByReference bitmap, ALLEGRO_COLOR tint, float cx, float cy, float dx, float dy, float xscale, float yscale, float angle, int flags);
	@Deprecated 
	public static native void al_draw_tinted_scaled_rotated_bitmap_region(Pointer bitmap, float sx, float sy, float sw, float sh, ALLEGRO_COLOR tint, float cx, float cy, float dx, float dy, float xscale, float yscale, float angle, int flags);
	public static native void al_draw_tinted_scaled_rotated_bitmap_region(PointerByReference bitmap, float sx, float sy, float sw, float sh, ALLEGRO_COLOR tint, float cx, float cy, float dx, float dy, float xscale, float yscale, float angle, int flags);
	@Deprecated 
	public static native PointerByReference al_create_path(Pointer str);
	public static native PointerByReference al_create_path(String str);
	@Deprecated 
	public static native PointerByReference al_create_path_for_directory(Pointer str);
	public static native PointerByReference al_create_path_for_directory(String str);
	@Deprecated 
	public static native PointerByReference al_clone_path(Pointer path);
	public static native PointerByReference al_clone_path(PointerByReference path);
	@Deprecated 
	public static native int al_get_path_num_components(Pointer path);
	public static native int al_get_path_num_components(PointerByReference path);
	@Deprecated 
	public static native Pointer al_get_path_component(Pointer path, int i);
	public static native Pointer al_get_path_component(PointerByReference path, int i);
	@Deprecated 
	public static native void al_replace_path_component(Pointer path, int i, Pointer s);
	public static native void al_replace_path_component(PointerByReference path, int i, String s);
	public static native void al_replace_path_component(PointerByReference path, int i, Pointer s);
	@Deprecated 
	public static native void al_remove_path_component(Pointer path, int i);
	public static native void al_remove_path_component(PointerByReference path, int i);
	@Deprecated 
	public static native void al_insert_path_component(Pointer path, int i, Pointer s);
	public static native void al_insert_path_component(PointerByReference path, int i, String s);
	public static native void al_insert_path_component(PointerByReference path, int i, Pointer s);
	@Deprecated 
	public static native Pointer al_get_path_tail(Pointer path);
	public static native Pointer al_get_path_tail(PointerByReference path);
	@Deprecated 
	public static native void al_drop_path_tail(Pointer path);
	public static native void al_drop_path_tail(PointerByReference path);
	@Deprecated 
	public static native void al_append_path_component(Pointer path, Pointer s);
	public static native void al_append_path_component(PointerByReference path, String s);
	public static native void al_append_path_component(PointerByReference path, Pointer s);
	@Deprecated 
	public static native byte al_join_paths(Pointer path, Pointer tail);
	public static native byte al_join_paths(PointerByReference path, PointerByReference tail);
	@Deprecated 
	public static native byte al_rebase_path(Pointer head, Pointer tail);
	public static native byte al_rebase_path(PointerByReference head, PointerByReference tail);
	@Deprecated 
	public static native Pointer al_path_cstr(Pointer path, byte delim);
	public static native Pointer al_path_cstr(PointerByReference path, byte delim);
	@Deprecated 
	public static native void al_destroy_path(Pointer path);
	public static native void al_destroy_path(PointerByReference path);
	@Deprecated 
	public static native void al_set_path_drive(Pointer path, Pointer drive);
	public static native void al_set_path_drive(PointerByReference path, String drive);
	public static native void al_set_path_drive(PointerByReference path, Pointer drive);
	@Deprecated 
	public static native Pointer al_get_path_drive(Pointer path);
	public static native Pointer al_get_path_drive(PointerByReference path);
	@Deprecated 
	public static native void al_set_path_filename(Pointer path, Pointer filename);
	public static native void al_set_path_filename(PointerByReference path, String filename);
	public static native void al_set_path_filename(PointerByReference path, Pointer filename);
	@Deprecated 
	public static native Pointer al_get_path_filename(Pointer path);
	public static native Pointer al_get_path_filename(PointerByReference path);
	@Deprecated 
	public static native Pointer al_get_path_extension(Pointer path);
	public static native Pointer al_get_path_extension(PointerByReference path);
	@Deprecated 
	public static native byte al_set_path_extension(Pointer path, Pointer extension);
	public static native byte al_set_path_extension(PointerByReference path, String extension);
	public static native byte al_set_path_extension(PointerByReference path, Pointer extension);
	@Deprecated 
	public static native Pointer al_get_path_basename(Pointer path);
	public static native Pointer al_get_path_basename(PointerByReference path);
	@Deprecated 
	public static native byte al_make_path_canonical(Pointer path);
	public static native byte al_make_path_canonical(PointerByReference path);
	@Deprecated 
	public static native _al_tagbstring al_ustr_new(Pointer s);
	public static native _al_tagbstring al_ustr_new(String s);
	@Deprecated 
	public static native _al_tagbstring al_ustr_new_from_buffer(Pointer s, size_t size);
	public static native _al_tagbstring al_ustr_new_from_buffer(String s, size_t size);
//	@Deprecated
//	public static native _al_tagbstring al_ustr_newf(Pointer fmt, Object... varArgs1);
//	public static native _al_tagbstring al_ustr_newf(String fmt, Object... varArgs1);
	public static native void al_ustr_free(_al_tagbstring us);
	public static native Pointer al_cstr(_al_tagbstring us);
	@Deprecated 
	public static native void al_ustr_to_buffer(_al_tagbstring us, Pointer buffer, int size);
	public static native void al_ustr_to_buffer(_al_tagbstring us, ByteBuffer buffer, int size);
	public static native Pointer al_cstr_dup(_al_tagbstring us);
	public static native _al_tagbstring al_ustr_dup(_al_tagbstring us);
	public static native _al_tagbstring al_ustr_dup_substr(_al_tagbstring us, int start_pos, int end_pos);
	public static native _al_tagbstring al_ustr_empty_string();
	@Deprecated 
	public static native _al_tagbstring al_ref_cstr(_al_tagbstring info, Pointer s);
	public static native _al_tagbstring al_ref_cstr(_al_tagbstring info, String s);
	@Deprecated 
	public static native _al_tagbstring al_ref_buffer(_al_tagbstring info, Pointer s, size_t size);
	public static native _al_tagbstring al_ref_buffer(_al_tagbstring info, String s, size_t size);
	public static native _al_tagbstring al_ref_ustr(_al_tagbstring info, _al_tagbstring us, int start_pos, int end_pos);
	public static native size_t al_ustr_size(_al_tagbstring us);
	public static native size_t al_ustr_length(_al_tagbstring us);
	public static native int al_ustr_offset(_al_tagbstring us, int index);
	@Deprecated 
	public static native byte al_ustr_next(_al_tagbstring us, IntByReference pos);
	public static native byte al_ustr_next(_al_tagbstring us, IntBuffer pos);
	@Deprecated 
	public static native byte al_ustr_prev(_al_tagbstring us, IntByReference pos);
	public static native byte al_ustr_prev(_al_tagbstring us, IntBuffer pos);
	public static native int al_ustr_get(_al_tagbstring us, int pos);
	@Deprecated 
	public static native int al_ustr_get_next(_al_tagbstring us, IntByReference pos);
	public static native int al_ustr_get_next(_al_tagbstring us, IntBuffer pos);
	@Deprecated 
	public static native int al_ustr_prev_get(_al_tagbstring us, IntByReference pos);
	public static native int al_ustr_prev_get(_al_tagbstring us, IntBuffer pos);
	public static native byte al_ustr_insert(_al_tagbstring us1, int pos, _al_tagbstring us2);
	@Deprecated 
	public static native byte al_ustr_insert_cstr(_al_tagbstring us, int pos, Pointer us2);
	public static native byte al_ustr_insert_cstr(_al_tagbstring us, int pos, String us2);
	public static native size_t al_ustr_insert_chr(_al_tagbstring us, int pos, int c);
	public static native byte al_ustr_append(_al_tagbstring us1, _al_tagbstring us2);
	@Deprecated 
	public static native byte al_ustr_append_cstr(_al_tagbstring us, Pointer s);
	public static native byte al_ustr_append_cstr(_al_tagbstring us, String s);
	public static native size_t al_ustr_append_chr(_al_tagbstring us, int c);
//	@Deprecated
//	public static native byte al_ustr_appendf(_al_tagbstring us, Pointer fmt, Object... varArgs1);
//	public static native byte al_ustr_appendf(_al_tagbstring us, String fmt, Object... varArgs1);
//	@Deprecated
//	public static native byte al_ustr_vappendf(_al_tagbstring us, Pointer fmt, Object... ap);
//	public static native byte al_ustr_vappendf(_al_tagbstring us, String fmt, Object... ap);
	public static native byte al_ustr_remove_chr(_al_tagbstring us, int pos);
	public static native byte al_ustr_remove_range(_al_tagbstring us, int start_pos, int end_pos);
	public static native byte al_ustr_truncate(_al_tagbstring us, int start_pos);
	public static native byte al_ustr_ltrim_ws(_al_tagbstring us);
	public static native byte al_ustr_rtrim_ws(_al_tagbstring us);
	public static native byte al_ustr_trim_ws(_al_tagbstring us);
	public static native byte al_ustr_assign(_al_tagbstring us1, _al_tagbstring us2);
	public static native byte al_ustr_assign_substr(_al_tagbstring us1, _al_tagbstring us2, int start_pos, int end_pos);
	@Deprecated 
	public static native byte al_ustr_assign_cstr(_al_tagbstring us1, Pointer s);
	public static native byte al_ustr_assign_cstr(_al_tagbstring us1, String s);
	public static native size_t al_ustr_set_chr(_al_tagbstring us, int pos, int c);
	public static native byte al_ustr_replace_range(_al_tagbstring us1, int start_pos1, int end_pos1, _al_tagbstring us2);
	public static native int al_ustr_find_chr(_al_tagbstring us, int start_pos, int c);
	public static native int al_ustr_rfind_chr(_al_tagbstring us, int start_pos, int c);
	public static native int al_ustr_find_set(_al_tagbstring us, int start_pos, _al_tagbstring accept);
	@Deprecated 
	public static native int al_ustr_find_set_cstr(_al_tagbstring us, int start_pos, Pointer accept);
	public static native int al_ustr_find_set_cstr(_al_tagbstring us, int start_pos, String accept);
	public static native int al_ustr_find_cset(_al_tagbstring us, int start_pos, _al_tagbstring reject);
	@Deprecated 
	public static native int al_ustr_find_cset_cstr(_al_tagbstring us, int start_pos, Pointer reject);
	public static native int al_ustr_find_cset_cstr(_al_tagbstring us, int start_pos, String reject);
	public static native int al_ustr_find_str(_al_tagbstring haystack, int start_pos, _al_tagbstring needle);
	@Deprecated 
	public static native int al_ustr_find_cstr(_al_tagbstring haystack, int start_pos, Pointer needle);
	public static native int al_ustr_find_cstr(_al_tagbstring haystack, int start_pos, String needle);
	public static native int al_ustr_rfind_str(_al_tagbstring haystack, int start_pos, _al_tagbstring needle);
	@Deprecated 
	public static native int al_ustr_rfind_cstr(_al_tagbstring haystack, int start_pos, Pointer needle);
	public static native int al_ustr_rfind_cstr(_al_tagbstring haystack, int start_pos, String needle);
	public static native byte al_ustr_find_replace(_al_tagbstring us, int start_pos, _al_tagbstring find, _al_tagbstring replace);
	@Deprecated 
	public static native byte al_ustr_find_replace_cstr(_al_tagbstring us, int start_pos, Pointer find, Pointer replace);
	public static native byte al_ustr_find_replace_cstr(_al_tagbstring us, int start_pos, String find, String replace);
	public static native byte al_ustr_equal(_al_tagbstring us1, _al_tagbstring us2);
	public static native int al_ustr_compare(_al_tagbstring u, _al_tagbstring v);
	public static native int al_ustr_ncompare(_al_tagbstring us1, _al_tagbstring us2, int n);
	public static native byte al_ustr_has_prefix(_al_tagbstring u, _al_tagbstring v);
	@Deprecated 
	public static native byte al_ustr_has_prefix_cstr(_al_tagbstring u, Pointer s);
	public static native byte al_ustr_has_prefix_cstr(_al_tagbstring u, String s);
	public static native byte al_ustr_has_suffix(_al_tagbstring u, _al_tagbstring v);
	@Deprecated 
	public static native byte al_ustr_has_suffix_cstr(_al_tagbstring us1, Pointer s);
	public static native byte al_ustr_has_suffix_cstr(_al_tagbstring us1, String s);
	public static native size_t al_utf8_width(int c);
	@Deprecated 
	public static native size_t al_utf8_encode(Pointer s, int c);
	public static native size_t al_utf8_encode(ByteBuffer s, int c);
	@Deprecated 
	public static native _al_tagbstring al_ustr_new_from_utf16(ShortByReference s);
	public static native _al_tagbstring al_ustr_new_from_utf16(short s[]);
	public static native size_t al_ustr_size_utf16(_al_tagbstring us);
	@Deprecated 
	public static native size_t al_ustr_encode_utf16(_al_tagbstring us, ShortByReference s, size_t n);
	public static native size_t al_ustr_encode_utf16(_al_tagbstring us, ShortBuffer s, size_t n);
	public static native size_t al_utf16_width(int c);
	@Deprecated 
	public static native size_t al_utf16_encode(ShortByReference s, int c);
	public static native size_t al_utf16_encode(ShortBuffer s, int c);
	@Deprecated 
	public static native PointerByReference al_fopen(Pointer path, Pointer mode);
	public static native PointerByReference al_fopen(String path, String mode);
	@Deprecated 
	public static native PointerByReference al_fopen_interface(ALLEGRO_FILE_INTERFACE vt, Pointer path, Pointer mode);
	public static native PointerByReference al_fopen_interface(ALLEGRO_FILE_INTERFACE vt, String path, String mode);
	public static native PointerByReference al_create_file_handle(ALLEGRO_FILE_INTERFACE vt, Pointer userdata);
	@Deprecated 
	public static native byte al_fclose(Pointer f);
	public static native byte al_fclose(PointerByReference f);
	@Deprecated 
	public static native size_t al_fread(Pointer f, Pointer ptr, size_t size);
	public static native size_t al_fread(PointerByReference f, Pointer ptr, size_t size);
	@Deprecated 
	public static native size_t al_fwrite(Pointer f, Pointer ptr, size_t size);
	public static native size_t al_fwrite(PointerByReference f, Pointer ptr, size_t size);
	@Deprecated 
	public static native byte al_fflush(Pointer f);
	public static native byte al_fflush(PointerByReference f);
	@Deprecated 
	public static native long al_ftell(Pointer f);
	public static native long al_ftell(PointerByReference f);
	@Deprecated 
	public static native byte al_fseek(Pointer f, long offset, int whence);
	public static native byte al_fseek(PointerByReference f, long offset, int whence);
	@Deprecated 
	public static native byte al_feof(Pointer f);
	public static native byte al_feof(PointerByReference f);
	@Deprecated 
	public static native int al_ferror(Pointer f);
	public static native int al_ferror(PointerByReference f);
	@Deprecated 
	public static native Pointer al_ferrmsg(Pointer f);
	public static native Pointer al_ferrmsg(PointerByReference f);
	@Deprecated 
	public static native void al_fclearerr(Pointer f);
	public static native void al_fclearerr(PointerByReference f);
	@Deprecated 
	public static native int al_fungetc(Pointer f, int c);
	public static native int al_fungetc(PointerByReference f, int c);
	@Deprecated 
	public static native long al_fsize(Pointer f);
	public static native long al_fsize(PointerByReference f);
	@Deprecated 
	public static native int al_fgetc(Pointer f);
	public static native int al_fgetc(PointerByReference f);
	@Deprecated 
	public static native int al_fputc(Pointer f, int c);
	public static native int al_fputc(PointerByReference f, int c);
	@Deprecated 
	public static native short al_fread16le(Pointer f);
	public static native short al_fread16le(PointerByReference f);
	@Deprecated 
	public static native short al_fread16be(Pointer f);
	public static native short al_fread16be(PointerByReference f);
	@Deprecated 
	public static native size_t al_fwrite16le(Pointer f, short w);
	public static native size_t al_fwrite16le(PointerByReference f, short w);
	@Deprecated 
	public static native size_t al_fwrite16be(Pointer f, short w);
	public static native size_t al_fwrite16be(PointerByReference f, short w);
	@Deprecated 
	public static native int al_fread32le(Pointer f);
	public static native int al_fread32le(PointerByReference f);
	@Deprecated 
	public static native int al_fread32be(Pointer f);
	public static native int al_fread32be(PointerByReference f);
	@Deprecated 
	public static native size_t al_fwrite32le(Pointer f, int l);
	public static native size_t al_fwrite32le(PointerByReference f, int l);
	@Deprecated 
	public static native size_t al_fwrite32be(Pointer f, int l);
	public static native size_t al_fwrite32be(PointerByReference f, int l);
	@Deprecated 
	public static native Pointer al_fgets(Pointer f, Pointer p, size_t max);
	public static native Pointer al_fgets(PointerByReference f, String p, size_t max);
	public static native Pointer al_fgets(PointerByReference f, Pointer p, size_t max);
	@Deprecated 
	public static native _al_tagbstring al_fget_ustr(Pointer f);
	public static native _al_tagbstring al_fget_ustr(PointerByReference f);
	@Deprecated 
	public static native int al_fputs(Pointer f, Pointer p);
	public static native int al_fputs(PointerByReference f, String p);
	public static native int al_fputs(PointerByReference f, Pointer p);
//	@Deprecated
//	public static native int al_fprintf(Pointer f, Pointer format, Object... varArgs1);
//	public static native int al_fprintf(PointerByReference f, String format, Object... varArgs1);
//	public static native int al_fprintf(PointerByReference f, Pointer format, Object... varArgs1);
//	@Deprecated
//	public static native int al_vfprintf(Pointer f, Pointer format, Object... args);
//	public static native int al_vfprintf(PointerByReference f, String format, Object... args);
//	public static native int al_vfprintf(PointerByReference f, Pointer format, Object... args);
	@Deprecated 
	public static native PointerByReference al_fopen_fd(int fd, Pointer mode);
	public static native PointerByReference al_fopen_fd(int fd, String mode);
	@Deprecated 
	public static native PointerByReference al_make_temp_file(Pointer tmpl, PointerByReference ret_path);
	public static native PointerByReference al_make_temp_file(String tmpl, PointerByReference ret_path);
	@Deprecated 
	public static native PointerByReference al_fopen_slice(Pointer fp, size_t initial_size, Pointer mode);
	public static native PointerByReference al_fopen_slice(PointerByReference fp, size_t initial_size, String mode);
	public static native PointerByReference al_fopen_slice(PointerByReference fp, size_t initial_size, Pointer mode);
	public static native ALLEGRO_FILE_INTERFACE al_get_new_file_interface();
	public static native void al_set_new_file_interface(ALLEGRO_FILE_INTERFACE file_interface);
	public static native void al_set_standard_file_interface();
	@Deprecated 
	public static native Pointer al_get_file_userdata(Pointer f);
	public static native Pointer al_get_file_userdata(PointerByReference f);
	@Deprecated 
	public static native byte al_register_bitmap_loader(Pointer ext, AllegroLibrary.ALLEGRO_IIO_LOADER_FUNCTION loader);
	public static native byte al_register_bitmap_loader(String ext, AllegroLibrary.ALLEGRO_IIO_LOADER_FUNCTION loader);
	@Deprecated 
	public static native byte al_register_bitmap_saver(Pointer ext, AllegroLibrary.ALLEGRO_IIO_SAVER_FUNCTION saver);
	public static native byte al_register_bitmap_saver(String ext, AllegroLibrary.ALLEGRO_IIO_SAVER_FUNCTION saver);
	@Deprecated 
	public static native byte al_register_bitmap_loader_f(Pointer ext, AllegroLibrary.ALLEGRO_IIO_FS_LOADER_FUNCTION fs_loader);
	public static native byte al_register_bitmap_loader_f(String ext, AllegroLibrary.ALLEGRO_IIO_FS_LOADER_FUNCTION fs_loader);
	@Deprecated 
	public static native byte al_register_bitmap_saver_f(Pointer ext, AllegroLibrary.ALLEGRO_IIO_FS_SAVER_FUNCTION fs_saver);
	public static native byte al_register_bitmap_saver_f(String ext, AllegroLibrary.ALLEGRO_IIO_FS_SAVER_FUNCTION fs_saver);
	@Deprecated 
	public static native byte al_register_bitmap_identifier(Pointer ext, AllegroLibrary.ALLEGRO_IIO_IDENTIFIER_FUNCTION identifier);
	public static native byte al_register_bitmap_identifier(String ext, AllegroLibrary.ALLEGRO_IIO_IDENTIFIER_FUNCTION identifier);
	@Deprecated 
	public static native PointerByReference al_load_bitmap(Pointer filename);
	public static native PointerByReference al_load_bitmap(String filename);
	@Deprecated 
	public static native PointerByReference al_load_bitmap_flags(Pointer filename, int flags);
	public static native PointerByReference al_load_bitmap_flags(String filename, int flags);
	@Deprecated 
	public static native PointerByReference al_load_bitmap_f(Pointer fp, Pointer ident);
	public static native PointerByReference al_load_bitmap_f(PointerByReference fp, String ident);
	public static native PointerByReference al_load_bitmap_f(PointerByReference fp, Pointer ident);
	@Deprecated 
	public static native PointerByReference al_load_bitmap_flags_f(Pointer fp, Pointer ident, int flags);
	public static native PointerByReference al_load_bitmap_flags_f(PointerByReference fp, String ident, int flags);
	public static native PointerByReference al_load_bitmap_flags_f(PointerByReference fp, Pointer ident, int flags);
	@Deprecated 
	public static native byte al_save_bitmap(Pointer filename, Pointer bitmap);
	public static native byte al_save_bitmap(String filename, PointerByReference bitmap);
	public static native byte al_save_bitmap(Pointer filename, PointerByReference bitmap);
	@Deprecated 
	public static native byte al_save_bitmap_f(Pointer fp, Pointer ident, Pointer bitmap);
	public static native byte al_save_bitmap_f(PointerByReference fp, String ident, PointerByReference bitmap);
	public static native byte al_save_bitmap_f(PointerByReference fp, Pointer ident, PointerByReference bitmap);
	@Deprecated 
	public static native Pointer al_identify_bitmap_f(Pointer fp);
	public static native Pointer al_identify_bitmap_f(PointerByReference fp);
	@Deprecated 
	public static native Pointer al_identify_bitmap(Pointer filename);
	public static native Pointer al_identify_bitmap(String filename);
	@Deprecated 
	public static native ALLEGRO_LOCKED_REGION al_lock_bitmap(Pointer bitmap, int format, int flags);
	public static native ALLEGRO_LOCKED_REGION al_lock_bitmap(PointerByReference bitmap, int format, int flags);
	@Deprecated 
	public static native ALLEGRO_LOCKED_REGION al_lock_bitmap_region(Pointer bitmap, int x, int y, int width, int height, int format, int flags);
	public static native ALLEGRO_LOCKED_REGION al_lock_bitmap_region(PointerByReference bitmap, int x, int y, int width, int height, int format, int flags);
	@Deprecated 
	public static native ALLEGRO_LOCKED_REGION al_lock_bitmap_blocked(Pointer bitmap, int flags);
	public static native ALLEGRO_LOCKED_REGION al_lock_bitmap_blocked(PointerByReference bitmap, int flags);
	@Deprecated 
	public static native ALLEGRO_LOCKED_REGION al_lock_bitmap_region_blocked(Pointer bitmap, int x_block, int y_block, int width_block, int height_block, int flags);
	public static native ALLEGRO_LOCKED_REGION al_lock_bitmap_region_blocked(PointerByReference bitmap, int x_block, int y_block, int width_block, int height_block, int flags);
	@Deprecated 
	public static native void al_unlock_bitmap(Pointer bitmap);
	public static native void al_unlock_bitmap(PointerByReference bitmap);
	@Deprecated 
	public static native byte al_is_bitmap_locked(Pointer bitmap);
	public static native byte al_is_bitmap_locked(PointerByReference bitmap);
	public static native void al_set_blender(int op, int source, int dest);
	public static native void al_set_blend_color(ALLEGRO_COLOR color);
	@Deprecated 
	public static native void al_get_blender(IntByReference op, IntByReference source, IntByReference dest);
	public static native void al_get_blender(IntBuffer op, IntBuffer source, IntBuffer dest);
	public static native ALLEGRO_COLOR al_get_blend_color();
	public static native void al_set_separate_blender(int op, int source, int dest, int alpha_op, int alpha_source, int alpha_dest);
	@Deprecated 
	public static native void al_get_separate_blender(IntByReference op, IntByReference source, IntByReference dest, IntByReference alpha_op, IntByReference alpha_src, IntByReference alpha_dest);
	public static native void al_get_separate_blender(IntBuffer op, IntBuffer source, IntBuffer dest, IntBuffer alpha_op, IntBuffer alpha_src, IntBuffer alpha_dest);

	//Event functions
	public static native void al_init_user_event_source(ALLEGRO_EVENT_SOURCE src);
	public static native void al_destroy_user_event_source(ALLEGRO_EVENT_SOURCE src);
	public static native boolean al_emit_user_event(ALLEGRO_EVENT_SOURCE src, ALLEGRO_EVENT event, al_emit_user_event_dtor_callback dtor);
	public static native void al_unref_user_event(ALLEGRO_USER_EVENT event);
	public static native void al_set_event_source_data(ALLEGRO_EVENT_SOURCE source, Pointer data);
	public static native Pointer al_get_event_source_data(ALLEGRO_EVENT_SOURCE source);
	public static native ALLEGRO_EVENT_QUEUE al_create_event_queue();
	public static native void al_destroy_event_queue(ALLEGRO_EVENT_QUEUE queue);
	public static native boolean al_is_event_source_registered(ALLEGRO_EVENT_QUEUE queue, ALLEGRO_EVENT_SOURCE source);
	public static native void al_register_event_source(ALLEGRO_EVENT_QUEUE queue, ALLEGRO_EVENT_SOURCE source);
	public static native void al_unregister_event_source(ALLEGRO_EVENT_QUEUE queue, ALLEGRO_EVENT_SOURCE source);
	public static native void al_pause_event_queue(ALLEGRO_EVENT_QUEUE queue, boolean paused);
	public static native boolean al_is_event_queue_paused(ALLEGRO_EVENT_QUEUE queue);
	public static native boolean al_is_event_queue_empty(ALLEGRO_EVENT_QUEUE queue);
	public static native boolean al_get_next_event(ALLEGRO_EVENT_QUEUE queue, ALLEGRO_EVENT ret_event);
	public static native boolean al_peek_next_event(ALLEGRO_EVENT_QUEUE queue, ALLEGRO_EVENT ret_event);
	public static native boolean al_drop_next_event(ALLEGRO_EVENT_QUEUE queue);
	public static native void al_flush_event_queue(ALLEGRO_EVENT_QUEUE queue);
	public static native void al_wait_for_event(ALLEGRO_EVENT_QUEUE queue, ALLEGRO_EVENT ret_event);
	public static native byte al_wait_for_event_timed(ALLEGRO_EVENT_QUEUE queue, ALLEGRO_EVENT ret_event, float secs);
	public static native byte al_wait_for_event_until(ALLEGRO_EVENT_QUEUE queue, ALLEGRO_EVENT ret_event, ALLEGRO_TIMEOUT timeout);

	//Display Functions
	public static native void al_set_new_display_refresh_rate(int refresh_rate);
	public static native void al_set_new_display_flags(int flags);
	public static native int al_get_new_display_refresh_rate();
	public static native int al_get_new_display_flags();
	public static native void al_set_new_window_title(String title);
	public static native String al_get_new_window_title();
	public static native int al_get_display_width(ALLEGRO_DISPLAY display);
	public static native int al_get_display_height(ALLEGRO_DISPLAY display);
	public static native int al_get_display_format(ALLEGRO_DISPLAY display);
	public static native int al_get_display_refresh_rate(ALLEGRO_DISPLAY display);
	public static native int al_get_display_flags(ALLEGRO_DISPLAY display);
	public static native int al_get_display_orientation(ALLEGRO_DISPLAY display);
	public static native boolean al_set_display_flag(ALLEGRO_DISPLAY display, int flag, boolean onoff);
	public static native ALLEGRO_DISPLAY al_create_display(int w, int h);
	public static native void al_destroy_display(ALLEGRO_DISPLAY display);
	public static native ALLEGRO_DISPLAY al_get_current_display();
	public static native void al_set_target_bitmap(ALLEGRO_BITMAP bitmap);
	public static native void al_set_target_backbuffer(ALLEGRO_DISPLAY display);
	public static native ALLEGRO_BITMAP al_get_backbuffer(ALLEGRO_DISPLAY display);
	public static native ALLEGRO_BITMAP al_get_target_bitmap();
	public static native boolean al_acknowledge_resize(ALLEGRO_DISPLAY display);
	public static native boolean al_resize_display(ALLEGRO_DISPLAY display, int width, int height);
	public static native void al_flip_display();
	public static native void al_update_display_region(int x, int y, int width, int height);
	public static native boolean al_is_compatible_bitmap(ALLEGRO_BITMAP bitmap);
	public static native boolean al_wait_for_vsync();
	public static native ALLEGRO_EVENT_SOURCE al_get_display_event_source(ALLEGRO_DISPLAY display);
	public static native void al_set_display_icon(ALLEGRO_DISPLAY display, ALLEGRO_BITMAP icon);
	public static native void al_set_display_icons(ALLEGRO_DISPLAY display, int num_icons, Pointer icons);
	public static native int al_get_new_display_adapter();
	public static native void al_set_new_display_adapter(int adapter);
	public static native void al_set_new_window_position(int x, int y);
	public static native void al_get_new_window_position(IntByReference x, IntByReference y);
	public static native void al_set_window_position(ALLEGRO_DISPLAY display, int x, int y);
	public static native void al_get_window_position(ALLEGRO_DISPLAY display, IntByReference x, IntByReference y);
	public static native byte al_set_window_constraints(ALLEGRO_DISPLAY display, int min_w, int min_h, int max_w, int max_h);
	public static native byte al_get_window_constraints(ALLEGRO_DISPLAY display, IntByReference min_w, IntByReference min_h, IntByReference max_w, IntByReference max_h);
	public static native void al_set_window_title(ALLEGRO_DISPLAY display, String title);
	public static native void al_set_new_display_option(int option, int value, int importance);
	public static native int al_get_new_display_option(int option, IntByReference importance);
	public static native void al_reset_new_display_options();
	public static native void al_set_display_option(ALLEGRO_DISPLAY display, int option, int value);
	public static native int al_get_display_option(ALLEGRO_DISPLAY display, int option);
	public static native void al_hold_bitmap_drawing(boolean hold);
	public static native boolean al_is_bitmap_drawing_held();
	public static native void al_acknowledge_drawing_halt(ALLEGRO_DISPLAY display);
	public static native void al_acknowledge_drawing_resume(ALLEGRO_DISPLAY display);
	public static native String al_get_clipboard_text(ALLEGRO_DISPLAY display);
	public static native boolean al_set_clipboard_text(ALLEGRO_DISPLAY display, String text);
	public static native boolean al_clipboard_has_text(ALLEGRO_DISPLAY display);

	public static native PointerByReference al_create_config();
	@Deprecated 
	public static native void al_add_config_section(Pointer config, Pointer name);
	public static native void al_add_config_section(PointerByReference config, String name);
	public static native void al_add_config_section(PointerByReference config, Pointer name);
	@Deprecated 
	public static native void al_set_config_value(Pointer config, Pointer section, Pointer key, Pointer value);
	public static native void al_set_config_value(PointerByReference config, String section, String key, String value);
	public static native void al_set_config_value(PointerByReference config, Pointer section, Pointer key, Pointer value);
	@Deprecated 
	public static native void al_add_config_comment(Pointer config, Pointer section, Pointer comment);
	public static native void al_add_config_comment(PointerByReference config, String section, String comment);
	public static native void al_add_config_comment(PointerByReference config, Pointer section, Pointer comment);
	@Deprecated 
	public static native Pointer al_get_config_value(Pointer config, Pointer section, Pointer key);
	public static native Pointer al_get_config_value(PointerByReference config, String section, String key);
	public static native Pointer al_get_config_value(PointerByReference config, Pointer section, Pointer key);
	@Deprecated 
	public static native PointerByReference al_load_config_file(Pointer filename);
	public static native PointerByReference al_load_config_file(String filename);
	@Deprecated 
	public static native PointerByReference al_load_config_file_f(Pointer filename);
	public static native PointerByReference al_load_config_file_f(PointerByReference filename);
	@Deprecated 
	public static native byte al_save_config_file(Pointer filename, Pointer config);
	public static native byte al_save_config_file(String filename, PointerByReference config);
	public static native byte al_save_config_file(Pointer filename, PointerByReference config);
	@Deprecated 
	public static native byte al_save_config_file_f(Pointer file, Pointer config);
	public static native byte al_save_config_file_f(PointerByReference file, PointerByReference config);
	@Deprecated 
	public static native void al_merge_config_into(Pointer master, Pointer add);
	public static native void al_merge_config_into(PointerByReference master, PointerByReference add);
	@Deprecated 
	public static native PointerByReference al_merge_config(Pointer cfg1, Pointer cfg2);
	public static native PointerByReference al_merge_config(PointerByReference cfg1, PointerByReference cfg2);
	@Deprecated 
	public static native void al_destroy_config(Pointer config);
	public static native void al_destroy_config(PointerByReference config);
	@Deprecated 
	public static native byte al_remove_config_section(Pointer config, Pointer section);
	public static native byte al_remove_config_section(PointerByReference config, String section);
	public static native byte al_remove_config_section(PointerByReference config, Pointer section);
	@Deprecated 
	public static native byte al_remove_config_key(Pointer config, Pointer section, Pointer key);
	public static native byte al_remove_config_key(PointerByReference config, String section, String key);
	public static native byte al_remove_config_key(PointerByReference config, Pointer section, Pointer key);
	@Deprecated 
	public static native Pointer al_get_first_config_section(Pointer config, PointerByReference iterator);
	public static native Pointer al_get_first_config_section(PointerByReference config, PointerByReference iterator);
	public static native Pointer al_get_next_config_section(PointerByReference iterator);
	@Deprecated 
	public static native Pointer al_get_first_config_entry(Pointer config, Pointer section, PointerByReference iterator);
	public static native Pointer al_get_first_config_entry(PointerByReference config, String section, PointerByReference iterator);
	public static native Pointer al_get_first_config_entry(PointerByReference config, Pointer section, PointerByReference iterator);
	public static native Pointer al_get_next_config_entry(PointerByReference iterator);
	public static native int al_get_cpu_count();
	public static native int al_get_ram_size();
	@Deprecated 
	public static native byte _al_trace_prefix(Pointer channel, int level, Pointer file, int line, Pointer function);
	public static native byte _al_trace_prefix(String channel, int level, String file, int line, String function);
//	@Deprecated
//	public static native void _al_trace_suffix(Pointer msg, Object... varArgs1);
//	public static native void _al_trace_suffix(String msg, Object... varArgs1);
	public static native void al_register_assert_handler(AllegroLibrary.al_register_assert_handler_handler_callback handler);
	public static native void al_register_trace_handler(AllegroLibrary.al_register_trace_handler_handler_callback handler);
	public static native void al_clear_to_color(ALLEGRO_COLOR color);
	public static native void al_clear_depth_buffer(float x);
	public static native void al_draw_pixel(float x, float y, ALLEGRO_COLOR color);
	public static native int al_get_errno();
	public static native void al_set_errno(int errnum);
	public static native int al_fixsqrt(int x);
	public static native int al_fixhypot(int x, int y);
	public static native int al_fixatan(int x);
	public static native int al_fixatan2(int y, int x);
	@Deprecated 
	public static native ALLEGRO_FS_ENTRY al_create_fs_entry(Pointer path);
	public static native ALLEGRO_FS_ENTRY al_create_fs_entry(String path);
	public static native void al_destroy_fs_entry(ALLEGRO_FS_ENTRY e);
	public static native Pointer al_get_fs_entry_name(ALLEGRO_FS_ENTRY e);
	public static native byte al_update_fs_entry(ALLEGRO_FS_ENTRY e);
	public static native int al_get_fs_entry_mode(ALLEGRO_FS_ENTRY e);
	/**
	 * <i>native declaration : include\allegro5\fshook.h:74</i><br>
	 * Conversion Error : extern time_t (Primitive without known type for this runtime: NativeTime)
	 */
	/**
	 * <i>native declaration : include\allegro5\fshook.h:75</i><br>
	 * Conversion Error : extern time_t (Primitive without known type for this runtime: NativeTime)
	 */
	/**
	 * <i>native declaration : include\allegro5\fshook.h:76</i><br>
	 * Conversion Error : extern time_t (Primitive without known type for this runtime: NativeTime)
	 */
	public static native AllegroLibrary.off_t al_get_fs_entry_size(ALLEGRO_FS_ENTRY e);
	public static native byte al_fs_entry_exists(ALLEGRO_FS_ENTRY e);
	public static native byte al_remove_fs_entry(ALLEGRO_FS_ENTRY e);
	public static native byte al_open_directory(ALLEGRO_FS_ENTRY e);
	public static native ALLEGRO_FS_ENTRY al_read_directory(ALLEGRO_FS_ENTRY e);
	public static native byte al_close_directory(ALLEGRO_FS_ENTRY e);
	@Deprecated 
	public static native byte al_filename_exists(Pointer path);
	public static native byte al_filename_exists(String path);
	@Deprecated 
	public static native byte al_remove_filename(Pointer path);
	public static native byte al_remove_filename(String path);
	public static native Pointer al_get_current_directory();
	@Deprecated 
	public static native byte al_change_directory(Pointer path);
	public static native byte al_change_directory(String path);
	@Deprecated 
	public static native byte al_make_directory(Pointer path);
	public static native byte al_make_directory(String path);
	@Deprecated 
	public static native PointerByReference al_open_fs_entry(ALLEGRO_FS_ENTRY e, Pointer mode);
	public static native PointerByReference al_open_fs_entry(ALLEGRO_FS_ENTRY e, String mode);
	public static native int al_for_each_fs_entry(ALLEGRO_FS_ENTRY dir, AllegroLibrary.al_for_each_fs_entry_callback_callback callback, Pointer extra);
	public static native ALLEGRO_FS_INTERFACE al_get_fs_interface();
	public static native void al_set_fs_interface(ALLEGRO_FS_INTERFACE vtable);
	public static native void al_set_standard_fs_interface();
	public static native int al_get_num_display_modes();
	public static native ALLEGRO_DISPLAY_MODE al_get_display_mode(int index, ALLEGRO_DISPLAY_MODE mode);
	public static native byte al_install_joystick();
	public static native void al_uninstall_joystick();
	public static native byte al_is_joystick_installed();
	public static native byte al_reconfigure_joysticks();
	public static native int al_get_num_joysticks();
	public static native PointerByReference al_get_joystick(int joyn);
	@Deprecated 
	public static native void al_release_joystick(Pointer ALLEGRO_JOYSTICKPtr1);
	public static native void al_release_joystick(PointerByReference ALLEGRO_JOYSTICKPtr1);
	@Deprecated 
	public static native byte al_get_joystick_active(Pointer ALLEGRO_JOYSTICKPtr1);
	public static native byte al_get_joystick_active(PointerByReference ALLEGRO_JOYSTICKPtr1);
	@Deprecated 
	public static native Pointer al_get_joystick_name(Pointer ALLEGRO_JOYSTICKPtr1);
	public static native Pointer al_get_joystick_name(PointerByReference ALLEGRO_JOYSTICKPtr1);
	@Deprecated 
	public static native int al_get_joystick_num_sticks(Pointer ALLEGRO_JOYSTICKPtr1);
	public static native int al_get_joystick_num_sticks(PointerByReference ALLEGRO_JOYSTICKPtr1);
	@Deprecated 
	public static native int al_get_joystick_stick_flags(Pointer ALLEGRO_JOYSTICKPtr1, int stick);
	public static native int al_get_joystick_stick_flags(PointerByReference ALLEGRO_JOYSTICKPtr1, int stick);
	@Deprecated 
	public static native Pointer al_get_joystick_stick_name(Pointer ALLEGRO_JOYSTICKPtr1, int stick);
	public static native Pointer al_get_joystick_stick_name(PointerByReference ALLEGRO_JOYSTICKPtr1, int stick);
	@Deprecated 
	public static native int al_get_joystick_num_axes(Pointer ALLEGRO_JOYSTICKPtr1, int stick);
	public static native int al_get_joystick_num_axes(PointerByReference ALLEGRO_JOYSTICKPtr1, int stick);
	@Deprecated 
	public static native Pointer al_get_joystick_axis_name(Pointer ALLEGRO_JOYSTICKPtr1, int stick, int axis);
	public static native Pointer al_get_joystick_axis_name(PointerByReference ALLEGRO_JOYSTICKPtr1, int stick, int axis);
	@Deprecated 
	public static native int al_get_joystick_num_buttons(Pointer ALLEGRO_JOYSTICKPtr1);
	public static native int al_get_joystick_num_buttons(PointerByReference ALLEGRO_JOYSTICKPtr1);
	@Deprecated 
	public static native Pointer al_get_joystick_button_name(Pointer ALLEGRO_JOYSTICKPtr1, int buttonn);
	public static native Pointer al_get_joystick_button_name(PointerByReference ALLEGRO_JOYSTICKPtr1, int buttonn);
	@Deprecated 
	public static native void al_get_joystick_state(Pointer ALLEGRO_JOYSTICKPtr1, ALLEGRO_JOYSTICK_STATE ret_state);
	public static native void al_get_joystick_state(PointerByReference ALLEGRO_JOYSTICKPtr1, ALLEGRO_JOYSTICK_STATE ret_state);
	public static native ALLEGRO_EVENT_SOURCE al_get_joystick_event_source();
	public static native byte al_is_keyboard_installed();
	public static native byte al_install_keyboard();
	public static native void al_uninstall_keyboard();
	public static native byte al_set_keyboard_leds(int leds);
	public static native Pointer al_keycode_to_name(int keycode);
	public static native void al_get_keyboard_state(ALLEGRO_KEYBOARD_STATE ret_state);
	public static native byte al_key_down(ALLEGRO_KEYBOARD_STATE ALLEGRO_KEYBOARD_STATEPtr1, int keycode);
	public static native ALLEGRO_EVENT_SOURCE al_get_keyboard_event_source();
	public static native byte al_is_mouse_installed();
	public static native byte al_install_mouse();
	public static native void al_uninstall_mouse();
	public static native int al_get_mouse_num_buttons();
	public static native int al_get_mouse_num_axes();
	@Deprecated 
	public static native byte al_set_mouse_xy(Pointer display, int x, int y);
	public static native byte al_set_mouse_xy(PointerByReference display, int x, int y);
	public static native byte al_set_mouse_z(int z);
	public static native byte al_set_mouse_w(int w);
	public static native byte al_set_mouse_axis(int axis, int value);
	public static native void al_get_mouse_state(ALLEGRO_MOUSE_STATE ret_state);
	public static native byte al_mouse_button_down(ALLEGRO_MOUSE_STATE state, int button);
	public static native int al_get_mouse_state_axis(ALLEGRO_MOUSE_STATE state, int axis);
	@Deprecated 
	public static native byte al_get_mouse_cursor_position(IntByReference ret_x, IntByReference ret_y);
	public static native byte al_get_mouse_cursor_position(IntBuffer ret_x, IntBuffer ret_y);
	@Deprecated 
	public static native byte al_grab_mouse(Pointer display);
	public static native byte al_grab_mouse(PointerByReference display);
	public static native byte al_ungrab_mouse();
	public static native void al_set_mouse_wheel_precision(int precision);
	public static native int al_get_mouse_wheel_precision();
	public static native ALLEGRO_EVENT_SOURCE al_get_mouse_event_source();
	public static native byte al_is_touch_input_installed();
	public static native byte al_install_touch_input();
	public static native void al_uninstall_touch_input();
	public static native void al_get_touch_input_state(ALLEGRO_TOUCH_INPUT_STATE ret_state);
	public static native ALLEGRO_EVENT_SOURCE al_get_touch_input_event_source();
	public static native void al_set_memory_interface(ALLEGRO_MEMORY_INTERFACE iface);
	@Deprecated 
	public static native Pointer al_malloc_with_context(size_t n, int line, Pointer file, Pointer func);
	public static native Pointer al_malloc_with_context(size_t n, int line, String file, String func);
	@Deprecated 
	public static native void al_free_with_context(Pointer ptr, int line, Pointer file, Pointer func);
	public static native void al_free_with_context(Pointer ptr, int line, String file, String func);
	@Deprecated 
	public static native Pointer al_realloc_with_context(Pointer ptr, size_t n, int line, Pointer file, Pointer func);
	public static native Pointer al_realloc_with_context(Pointer ptr, size_t n, int line, String file, String func);
	@Deprecated 
	public static native Pointer al_calloc_with_context(size_t count, size_t n, int line, Pointer file, Pointer func);
	public static native Pointer al_calloc_with_context(size_t count, size_t n, int line, String file, String func);
	public static native int al_get_num_video_adapters();
	public static native byte al_get_monitor_info(int adapter, ALLEGRO_MONITOR_INFO info);
	@Deprecated 
	public static native PointerByReference al_create_mouse_cursor(Pointer sprite, int xfocus, int yfocus);
	public static native PointerByReference al_create_mouse_cursor(PointerByReference sprite, int xfocus, int yfocus);
	@Deprecated 
	public static native void al_destroy_mouse_cursor(Pointer ALLEGRO_MOUSE_CURSORPtr1);
	public static native void al_destroy_mouse_cursor(PointerByReference ALLEGRO_MOUSE_CURSORPtr1);
	@Deprecated 
	public static native byte al_set_mouse_cursor(Pointer display, Pointer cursor);
	public static native byte al_set_mouse_cursor(PointerByReference display, PointerByReference cursor);
	@Deprecated 
	public static native byte al_set_system_mouse_cursor(Pointer display, int cursor_id);
	public static native byte al_set_system_mouse_cursor(PointerByReference display, int cursor_id);
	@Deprecated 
	public static native byte al_show_mouse_cursor(Pointer display);
	public static native byte al_show_mouse_cursor(PointerByReference display);
	@Deprecated 
	public static native byte al_hide_mouse_cursor(Pointer display);
	public static native byte al_hide_mouse_cursor(PointerByReference display);
	public static native void al_set_render_state(int state, int value);

	//Transformations functions
	public static native void al_use_transform(ALLEGRO_TRANSFORM trans);
	public static native void al_use_projection_transform(ALLEGRO_TRANSFORM trans);
	public static native void al_copy_transform(ALLEGRO_TRANSFORM dest, ALLEGRO_TRANSFORM src);
	public static native void al_identity_transform(ALLEGRO_TRANSFORM trans);
	public static native void al_build_transform(ALLEGRO_TRANSFORM trans, float x, float y, float sx, float sy, float theta);
	public static native void al_build_camera_transform(ALLEGRO_TRANSFORM trans, float position_x, float position_y, float position_z, float look_x, float look_y, float look_z, float up_x, float up_y, float up_z);
	public static native void al_translate_transform(ALLEGRO_TRANSFORM trans, float x, float y);
	public static native void al_translate_transform_3d(ALLEGRO_TRANSFORM trans, float x, float y, float z);
	public static native void al_rotate_transform(ALLEGRO_TRANSFORM trans, float theta);
	public static native void al_rotate_transform_3d(ALLEGRO_TRANSFORM trans, float x, float y, float z, float angle);
	public static native void al_scale_transform(ALLEGRO_TRANSFORM trans, float sx, float sy);
	public static native void al_scale_transform_3d(ALLEGRO_TRANSFORM trans, float sx, float sy, float sz);
	public static native void al_transform_coordinates(ALLEGRO_TRANSFORM trans, FloatByReference x, FloatByReference y);
	public static native void al_transform_coordinates_3d(ALLEGRO_TRANSFORM trans, FloatByReference x, FloatByReference y, FloatByReference z);
	public static native void al_compose_transform(ALLEGRO_TRANSFORM trans, ALLEGRO_TRANSFORM other);
	public static native ALLEGRO_TRANSFORM al_get_current_transform();
	public static native ALLEGRO_TRANSFORM al_get_current_inverse_transform();
	public static native ALLEGRO_TRANSFORM al_get_current_projection_transform();
	public static native void al_invert_transform(ALLEGRO_TRANSFORM trans);
	public static native int al_check_inverse(ALLEGRO_TRANSFORM trans, float tol);
	public static native void al_orthographic_transform(ALLEGRO_TRANSFORM trans, float left, float top, float n, float right, float bottom, float f);
	public static native void al_perspective_transform(ALLEGRO_TRANSFORM trans, float left, float top, float n, float right, float bottom, float f);
	public static native void al_horizontal_shear_transform(ALLEGRO_TRANSFORM trans, float theta);
	public static native void al_vertical_shear_transform(ALLEGRO_TRANSFORM trans, float theta);

	public static native PointerByReference al_create_shader(int platform);
	@Deprecated 
	public static native byte al_attach_shader_source(Pointer shader, int type, Pointer source);
	public static native byte al_attach_shader_source(PointerByReference shader, int type, String source);
	public static native byte al_attach_shader_source(PointerByReference shader, int type, Pointer source);
	@Deprecated 
	public static native byte al_attach_shader_source_file(Pointer shader, int type, Pointer filename);
	public static native byte al_attach_shader_source_file(PointerByReference shader, int type, String filename);
	public static native byte al_attach_shader_source_file(PointerByReference shader, int type, Pointer filename);
	@Deprecated 
	public static native byte al_build_shader(Pointer shader);
	public static native byte al_build_shader(PointerByReference shader);
	@Deprecated 
	public static native Pointer al_get_shader_log(Pointer shader);
	public static native Pointer al_get_shader_log(PointerByReference shader);
	@Deprecated 
	public static native int al_get_shader_platform(Pointer shader);
	public static native int al_get_shader_platform(PointerByReference shader);
	@Deprecated 
	public static native byte al_use_shader(Pointer shader);
	public static native byte al_use_shader(PointerByReference shader);
	@Deprecated 
	public static native void al_destroy_shader(Pointer shader);
	public static native void al_destroy_shader(PointerByReference shader);
	@Deprecated 
	public static native byte al_set_shader_sampler(Pointer name, Pointer bitmap, int unit);
	public static native byte al_set_shader_sampler(String name, PointerByReference bitmap, int unit);
	public static native byte al_set_shader_sampler(Pointer name, PointerByReference bitmap, int unit);
	@Deprecated 
	public static native byte al_set_shader_matrix(Pointer name, ALLEGRO_TRANSFORM matrix);
	public static native byte al_set_shader_matrix(String name, ALLEGRO_TRANSFORM matrix);
	@Deprecated 
	public static native byte al_set_shader_int(Pointer name, int i);
	public static native byte al_set_shader_int(String name, int i);
	@Deprecated 
	public static native byte al_set_shader_float(Pointer name, float f);
	public static native byte al_set_shader_float(String name, float f);
	@Deprecated 
	public static native byte al_set_shader_int_vector(Pointer name, int num_components, IntByReference i, int num_elems);
	public static native byte al_set_shader_int_vector(String name, int num_components, IntBuffer i, int num_elems);
	@Deprecated 
	public static native byte al_set_shader_float_vector(Pointer name, int num_components, FloatByReference f, int num_elems);
	public static native byte al_set_shader_float_vector(String name, int num_components, FloatBuffer f, int num_elems);
	@Deprecated 
	public static native byte al_set_shader_bool(Pointer name, byte b);
	public static native byte al_set_shader_bool(String name, byte b);
	public static native Pointer al_get_default_shader_source(int platform, int type);

	public static native boolean al_install_system(int version, al_install_system_atexit_ptr_callback atexit_ptr);
	public static native void al_uninstall_system();
	public static native boolean al_is_system_installed();
	public static native PointerByReference al_get_system_driver();
	public static native ALLEGRO_CONFIG al_get_system_config();
	public static native PointerByReference al_get_standard_path(int id);
	public static native void al_set_exe_name(String path);
	public static native void al_set_org_name(String org_name);
	public static native void al_set_app_name(String app_name);
	public static native String al_get_org_name();
	public static native String al_get_app_name();
	public static native byte al_inhibit_screensaver(byte inhibit);
	public static native PointerByReference al_create_thread(AllegroLibrary.al_create_thread_proc_callback proc, Pointer arg);
	@Deprecated 
	public static native void al_start_thread(Pointer outer);
	public static native void al_start_thread(PointerByReference outer);
	@Deprecated 
	public static native void al_join_thread(Pointer outer, PointerByReference ret_value);
	public static native void al_join_thread(PointerByReference outer, PointerByReference ret_value);
	@Deprecated 
	public static native void al_set_thread_should_stop(Pointer outer);
	public static native void al_set_thread_should_stop(PointerByReference outer);
	@Deprecated 
	public static native byte al_get_thread_should_stop(Pointer outer);
	public static native byte al_get_thread_should_stop(PointerByReference outer);
	@Deprecated 
	public static native void al_destroy_thread(Pointer thread);
	public static native void al_destroy_thread(PointerByReference thread);
	public static native void al_run_detached_thread(AllegroLibrary.al_run_detached_thread_proc_callback proc, Pointer arg);
	public static native PointerByReference al_create_mutex();
	public static native PointerByReference al_create_mutex_recursive();
	@Deprecated 
	public static native void al_lock_mutex(Pointer mutex);
	public static native void al_lock_mutex(PointerByReference mutex);
	@Deprecated 
	public static native void al_unlock_mutex(Pointer mutex);
	public static native void al_unlock_mutex(PointerByReference mutex);
	@Deprecated 
	public static native void al_destroy_mutex(Pointer mutex);
	public static native void al_destroy_mutex(PointerByReference mutex);
	public static native PointerByReference al_create_cond();
	@Deprecated 
	public static native void al_destroy_cond(Pointer cond);
	public static native void al_destroy_cond(PointerByReference cond);
	@Deprecated 
	public static native void al_wait_cond(Pointer cond, Pointer mutex);
	public static native void al_wait_cond(PointerByReference cond, PointerByReference mutex);
	@Deprecated 
	public static native int al_wait_cond_until(Pointer cond, Pointer mutex, ALLEGRO_TIMEOUT timeout);
	public static native int al_wait_cond_until(PointerByReference cond, PointerByReference mutex, ALLEGRO_TIMEOUT timeout);
	@Deprecated 
	public static native void al_broadcast_cond(Pointer cond);
	public static native void al_broadcast_cond(PointerByReference cond);
	@Deprecated 
	public static native void al_signal_cond(Pointer cond);
	public static native void al_signal_cond(PointerByReference cond);

	//Timer functions
	public static native ALLEGRO_TIMER al_create_timer(double speed_secs);
	public static native void al_destroy_timer(ALLEGRO_TIMER timer);
	public static native void al_start_timer(ALLEGRO_TIMER timer);
	public static native void al_stop_timer(ALLEGRO_TIMER timer);
	public static native void al_resume_timer(ALLEGRO_TIMER timer);
	public static native boolean al_get_timer_started(ALLEGRO_TIMER timer);
	public static native double al_get_timer_speed(ALLEGRO_TIMER timer);
	public static native void al_set_timer_speed(ALLEGRO_TIMER timer, double speed_secs);
	public static native long al_get_timer_count(ALLEGRO_TIMER timer);
	public static native void al_set_timer_count(ALLEGRO_TIMER timer, long count);
	public static native void al_add_timer_count(ALLEGRO_TIMER timer, long diff);
	public static native ALLEGRO_EVENT_SOURCE al_get_timer_event_source(ALLEGRO_TIMER timer);

	public static native void al_store_state(ALLEGRO_STATE state, int flags);
	public static native void al_restore_state(ALLEGRO_STATE state);

	//Primitives addon
	public interface al_triangulate_polygon_emit_triangle_callback extends Callback {
		void apply(int int1, int int2, int int3, Pointer voidPtr1);
	}

	public interface al_draw_soft_triangle_init_callback extends Callback {
		void apply(IntByReference uintptr_t1, ALLEGRO_VERTEX ALLEGRO_VERTEXPtr1, ALLEGRO_VERTEX ALLEGRO_VERTEXPtr2, ALLEGRO_VERTEX ALLEGRO_VERTEXPtr3);
	}

	public interface al_draw_soft_triangle_first_callback extends Callback {
		void apply(IntByReference uintptr_t1, int int1, int int2, int int3, int int4);
	}

	public interface al_draw_soft_triangle_step_callback extends Callback {
		void apply(IntByReference uintptr_t1, int int1);
	}

	public interface al_draw_soft_triangle_draw_callback extends Callback {
		void apply(IntByReference uintptr_t1, int int1, int int2, int int3);
	}

	public interface al_draw_soft_line_first_callback extends Callback {
		void apply(IntByReference uintptr_t1, int int1, int int2, ALLEGRO_VERTEX ALLEGRO_VERTEXPtr1, ALLEGRO_VERTEX ALLEGRO_VERTEXPtr2);
	}

	public interface al_draw_soft_line_step_callback extends Callback {
		void apply(IntByReference uintptr_t1, int int1);
	}

	public interface al_draw_soft_line_draw_callback extends Callback {
		void apply(IntByReference uintptr_t1, int int1, int int2);
	}

	public static native int al_get_allegro_primitives_version();
	public static native boolean al_init_primitives_addon();
	public static native void al_shutdown_primitives_addon();
	public static native int al_draw_prim(Pointer vtxs, ALLEGRO_VERTEX_DECL decl, ALLEGRO_BITMAP texture, int start, int end, int type);
	public static native int al_draw_indexed_prim(Pointer vtxs, ALLEGRO_VERTEX_DECL decl, ALLEGRO_BITMAP texture, IntBuffer indices, int num_vtx, int type);
	public static native int al_draw_vertex_buffer(ALLEGRO_VERTEX_BUFFER vertex_buffer, ALLEGRO_BITMAP texture, int start, int end, int type);
	public static native int al_draw_indexed_buffer(ALLEGRO_VERTEX_BUFFER vertex_buffer, ALLEGRO_BITMAP texture, ALLEGRO_INDEX_BUFFER index_buffer, int start, int end, int type);
	public static native ALLEGRO_VERTEX_DECL al_create_vertex_decl(Pointer elements, int stride);
	public static native void al_destroy_vertex_decl(ALLEGRO_VERTEX_DECL decl);
	public static native ALLEGRO_VERTEX_BUFFER al_create_vertex_buffer(ALLEGRO_VERTEX_DECL decl, Pointer initial_data, int num_vertices, int flags);
	public static native void al_destroy_vertex_buffer(ALLEGRO_VERTEX_BUFFER buffer);
	public static native Pointer al_lock_vertex_buffer(ALLEGRO_VERTEX_BUFFER buffer, int offset, int length, int flags);
	public static native void al_unlock_vertex_buffer(ALLEGRO_VERTEX_BUFFER buffer);
	public static native int al_get_vertex_buffer_size(ALLEGRO_VERTEX_BUFFER buffer);
	public static native ALLEGRO_INDEX_BUFFER al_create_index_buffer(int index_size, Pointer initial_data, int num_indices, int flags);
	public static native void al_destroy_index_buffer(ALLEGRO_INDEX_BUFFER buffer);
	public static native Pointer al_lock_index_buffer(ALLEGRO_INDEX_BUFFER buffer, int offset, int length, int flags);
	public static native void al_unlock_index_buffer(ALLEGRO_INDEX_BUFFER buffer);
	public static native int al_get_index_buffer_size(ALLEGRO_INDEX_BUFFER buffer);
	public static native boolean al_triangulate_polygon(FloatBuffer vertices, size_t vertex_stride, IntBuffer vertex_counts, AllegroLibrary.al_triangulate_polygon_emit_triangle_callback emit_triangle, Pointer userdata);
	public static native void al_draw_soft_triangle(ALLEGRO_VERTEX v1, ALLEGRO_VERTEX v2, ALLEGRO_VERTEX v3, Pointer state, AllegroLibrary.al_draw_soft_triangle_init_callback init, AllegroLibrary.al_draw_soft_triangle_first_callback first, AllegroLibrary.al_draw_soft_triangle_step_callback step, AllegroLibrary.al_draw_soft_triangle_draw_callback draw);
	public static native void al_draw_soft_line(ALLEGRO_VERTEX v1, ALLEGRO_VERTEX v2, Pointer state, AllegroLibrary.al_draw_soft_line_first_callback first, AllegroLibrary.al_draw_soft_line_step_callback step, AllegroLibrary.al_draw_soft_line_draw_callback draw);
	public static native void al_draw_line(float x1, float y1, float x2, float y2, ALLEGRO_COLOR color, float thickness);
	public static native void al_draw_triangle(float x1, float y1, float x2, float y2, float x3, float y3, ALLEGRO_COLOR color, float thickness);
	public static native void al_draw_rectangle(float x1, float y1, float x2, float y2, ALLEGRO_COLOR color, float thickness);
	public static native void al_draw_rounded_rectangle(float x1, float y1, float x2, float y2, float rx, float ry, ALLEGRO_COLOR color, float thickness);
	public static native void al_calculate_arc(FloatBuffer dest, int stride, float cx, float cy, float rx, float ry, float start_theta, float delta_theta, float thickness, int num_points);
	public static native void al_draw_circle(float cx, float cy, float r, ALLEGRO_COLOR color, float thickness);
	public static native void al_draw_ellipse(float cx, float cy, float rx, float ry, ALLEGRO_COLOR color, float thickness);
	public static native void al_draw_arc(float cx, float cy, float r, float start_theta, float delta_theta, ALLEGRO_COLOR color, float thickness);
	public static native void al_draw_elliptical_arc(float cx, float cy, float rx, float ry, float start_theta, float delta_theta, ALLEGRO_COLOR color, float thickness);
	public static native void al_draw_pieslice(float cx, float cy, float r, float start_theta, float delta_theta, ALLEGRO_COLOR color, float thickness);
	public static native void al_calculate_spline(FloatBuffer dest, int stride, FloatBuffer points, float thickness, int num_segments);
	public static native void al_draw_spline(FloatBuffer points, ALLEGRO_COLOR color, float thickness);
	public static native void al_calculate_ribbon(FloatBuffer dest, int dest_stride, FloatBuffer points, int points_stride, float thickness, int num_segments);
	public static native void al_draw_ribbon(FloatBuffer points, int points_stride, ALLEGRO_COLOR color, float thickness, int num_segments);
	public static native void al_draw_filled_triangle(float x1, float y1, float x2, float y2, float x3, float y3, ALLEGRO_COLOR color);
	public static native void al_draw_filled_rectangle(float x1, float y1, float x2, float y2, ALLEGRO_COLOR color);
	public static native void al_draw_filled_ellipse(float cx, float cy, float rx, float ry, ALLEGRO_COLOR color);
	public static native void al_draw_filled_circle(float cx, float cy, float r, ALLEGRO_COLOR color);
	public static native void al_draw_filled_pieslice(float cx, float cy, float r, float start_theta, float delta_theta, ALLEGRO_COLOR color);
	public static native void al_draw_filled_rounded_rectangle(float x1, float y1, float x2, float y2, float rx, float ry, ALLEGRO_COLOR color);
	public static native void al_draw_polyline(FloatBuffer vertices, int vertex_stride, int vertex_count, int join_style, int cap_style, ALLEGRO_COLOR color, float thickness, float miter_limit);
	public static native void al_draw_polygon(FloatBuffer vertices, int vertex_count, int join_style, ALLEGRO_COLOR color, float thickness, float miter_limit);
	public static native void al_draw_filled_polygon(FloatBuffer vertices, int vertex_count, ALLEGRO_COLOR color);
	public static native void al_draw_filled_polygon_with_holes(FloatBuffer vertices, IntBuffer vertex_counts, ALLEGRO_COLOR color);

	/** Pointer to unknown (opaque) type */
	public static class ALLEGRO_CONFIG extends PointerType {
		public ALLEGRO_CONFIG(Pointer address) {
			super(address);
		}
		public ALLEGRO_CONFIG() {
			super();
		}
	}

	/** Pointer to unknown (opaque) type */
	public static class ALLEGRO_SHADER extends PointerType {
		public ALLEGRO_SHADER(Pointer address) {
			super(address);
		}
		public ALLEGRO_SHADER() {
			super();
		}
	}

	/** Pointer to unknown (opaque) type */
	public static class ALLEGRO_CONFIG_ENTRY extends PointerType {
		public ALLEGRO_CONFIG_ENTRY(Pointer address) {
			super(address);
		}
		public ALLEGRO_CONFIG_ENTRY() {
			super();
		}
	}

	/** Pointer to unknown (opaque) type */
	public static class ALLEGRO_DISPLAY extends PointerType {
		public ALLEGRO_DISPLAY(Pointer address) {
			super(address);
		}
		public ALLEGRO_DISPLAY() {
			super();
		}
	}

	/** Pointer to unknown (opaque) type */
	public static class ALLEGRO_PATH extends PointerType {
		public ALLEGRO_PATH(Pointer address) {
			super(address);
		}
		public ALLEGRO_PATH() {
			super();
		}
	}

	/** Pointer to unknown (opaque) type */
	public static class ALLEGRO_FILE extends PointerType {
		public ALLEGRO_FILE(Pointer address) {
			super(address);
		}
		public ALLEGRO_FILE() {
			super();
		}
	}

	/** Pointer to unknown (opaque) type */
	public static class off_t extends PointerType {
		public off_t(Pointer address) {
			super(address);
		}
		public off_t() {
			super();
		}
	}

	/** Pointer to unknown (opaque) type */
	public static class ALLEGRO_THREAD extends PointerType {
		public ALLEGRO_THREAD(Pointer address) {
			super(address);
		}
		public ALLEGRO_THREAD() {
			super();
		}
	}

	/** Pointer to unknown (opaque) type */
	public static class ALLEGRO_KEYBOARD extends PointerType {
		public ALLEGRO_KEYBOARD(Pointer address) {
			super(address);
		}
		public ALLEGRO_KEYBOARD() {
			super();
		}
	}

	/** Pointer to unknown (opaque) type */
	public static class ALLEGRO_SYSTEM extends PointerType {
		public ALLEGRO_SYSTEM(Pointer address) {
			super(address);
		}
		public ALLEGRO_SYSTEM() {
			super();
		}
	}

	/** Pointer to unknown (opaque) type */
	public static class ALLEGRO_BITMAP extends PointerType {
		public ALLEGRO_BITMAP(Pointer address) {
			super(address);
		}
		public ALLEGRO_BITMAP() {
			super();
		}
	}

	/** Pointer to unknown (opaque) type */
	public static class ALLEGRO_TOUCH_INPUT extends PointerType {
		public ALLEGRO_TOUCH_INPUT(Pointer address) {
			super(address);
		}
		public ALLEGRO_TOUCH_INPUT() {
			super();
		}
	}

	/** Pointer to unknown (opaque) type */
	public static class ALLEGRO_CONFIG_SECTION extends PointerType {
		public ALLEGRO_CONFIG_SECTION(Pointer address) {
			super(address);
		}
		public ALLEGRO_CONFIG_SECTION() {
			super();
		}
	}

	/** Pointer to unknown (opaque) type */
	public static class ALLEGRO_COND extends PointerType {
		public ALLEGRO_COND(Pointer address) {
			super(address);
		}
		public ALLEGRO_COND() {
			super();
		}
	}

	/** Pointer to unknown (opaque) type */
	public static class ALLEGRO_USER_EVENT_DESCRIPTOR extends PointerType {
		public ALLEGRO_USER_EVENT_DESCRIPTOR(Pointer address) {
			super(address);
		}
		public ALLEGRO_USER_EVENT_DESCRIPTOR() {
			super();
		}
	}

	/** Pointer to unknown (opaque) type */
	public static class ALLEGRO_MUTEX extends PointerType {
		public ALLEGRO_MUTEX(Pointer address) {
			super(address);
		}
		public ALLEGRO_MUTEX() {
			super();
		}
	}

	/** Pointer to unknown (opaque) type */
	public static class ALLEGRO_JOYSTICK extends PointerType {
		public ALLEGRO_JOYSTICK(Pointer address) {
			super(address);
		}
		public ALLEGRO_JOYSTICK() {
			super();
		}
	}

	/** Pointer to unknown (opaque) type */
	public static class ALLEGRO_MOUSE extends PointerType {
		public ALLEGRO_MOUSE(Pointer address) {
			super(address);
		}
		public ALLEGRO_MOUSE() {
			super();
		}
	}

	/** Pointer to unknown (opaque) type */
	public static class ALLEGRO_TIMER extends PointerType {
		public ALLEGRO_TIMER(Pointer address) {
			super(address);
		}
		public ALLEGRO_TIMER() {
			super();
		}
	}

	/** Pointer to unknown (opaque) type */
	public static class ALLEGRO_EVENT_QUEUE extends PointerType {
		public ALLEGRO_EVENT_QUEUE(Pointer address) {
			super(address);
		}
		public ALLEGRO_EVENT_QUEUE() {
			super();
		}
	}

	/** Pointer to unknown (opaque) type */
	public static class ALLEGRO_MOUSE_CURSOR extends PointerType {
		public ALLEGRO_MOUSE_CURSOR(Pointer address) {
			super(address);
		}
		public ALLEGRO_MOUSE_CURSOR() {
			super();
		}
	}

	/** Pointer to unknown (opaque) type */
	public static class ALLEGRO_VERTEX_DECL extends PointerType {
		public ALLEGRO_VERTEX_DECL(Pointer address) {
			super(address);
		}
		public ALLEGRO_VERTEX_DECL() {
			super();
		}
	}

	/** Pointer to unknown (opaque) type */
	public static class ALLEGRO_VERTEX_BUFFER extends PointerType {
		public ALLEGRO_VERTEX_BUFFER(Pointer address) {
			super(address);
		}
		public ALLEGRO_VERTEX_BUFFER() {
			super();
		}
	}

	/** Pointer to unknown (opaque) type */
	public static class ALLEGRO_INDEX_BUFFER extends PointerType {
		public ALLEGRO_INDEX_BUFFER(Pointer address) {
			super(address);
		}
		public ALLEGRO_INDEX_BUFFER() {
			super();
		}
	}
}
