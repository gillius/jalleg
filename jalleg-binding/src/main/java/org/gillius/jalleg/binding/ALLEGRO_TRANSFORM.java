/*
 * Copyright 2016 Jason Winnebeck
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.gillius.jalleg.binding;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ALLEGRO_TRANSFORM extends Structure {
	public float[] m = new float[((4) * (4))];

	/**
	 * The default constructor builds an ALLEGRO_TRANSFORM with "autoSynch" turned off. This means that you cannot
	 * observe the fields from the Java side (it can only be passed into Allegro methods). This is good for performance,
	 * since normally the matrix does not need to be observed. If it does, use the {@link #ALLEGRO_TRANSFORM(float[])}
	 * method, or call {@link #setAutoSynch(boolean)}.
	 */
	public ALLEGRO_TRANSFORM() {
		super();
		setAutoSynch(false);
		ensureAllocated();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("m");
	}
	public ALLEGRO_TRANSFORM(float m[]) {
		super();
		if ((m.length != this.m.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.m = m;
	}
	public ALLEGRO_TRANSFORM(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends ALLEGRO_TRANSFORM implements Structure.ByReference {
		
	};
	public static class ByValue extends ALLEGRO_TRANSFORM implements Structure.ByValue {
		
	};
}
