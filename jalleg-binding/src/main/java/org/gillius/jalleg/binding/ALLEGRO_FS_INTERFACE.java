/*
 * Copyright 2016 Jason Winnebeck
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.gillius.jalleg.binding;
import com.sun.jna.Callback;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.ptr.PointerByReference;
import org.gillius.jalleg.binding.AllegroLibrary.ALLEGRO_FS_ENTRY;

import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ALLEGRO_FS_INTERFACE extends Structure {
	public ALLEGRO_FS_INTERFACE.fs_create_entry_callback fs_create_entry;
	public ALLEGRO_FS_INTERFACE.fs_destroy_entry_callback fs_destroy_entry;
	public ALLEGRO_FS_INTERFACE.fs_entry_name_callback fs_entry_name;
	public ALLEGRO_FS_INTERFACE.fs_update_entry_callback fs_update_entry;
	public ALLEGRO_FS_INTERFACE.fs_entry_mode_callback fs_entry_mode;
	public ALLEGRO_FS_INTERFACE.fs_entry_atime_callback fs_entry_atime;
	public ALLEGRO_FS_INTERFACE.fs_entry_mtime_callback fs_entry_mtime;
	public ALLEGRO_FS_INTERFACE.fs_entry_ctime_callback fs_entry_ctime;
	public ALLEGRO_FS_INTERFACE.fs_entry_exists_callback fs_entry_exists;
	public ALLEGRO_FS_INTERFACE.fs_remove_entry_callback fs_remove_entry;
	public ALLEGRO_FS_INTERFACE.fs_open_directory_callback fs_open_directory;
	public ALLEGRO_FS_INTERFACE.fs_read_directory_callback fs_read_directory;
	public ALLEGRO_FS_INTERFACE.fs_close_directory_callback fs_close_directory;
	public ALLEGRO_FS_INTERFACE.fs_filename_exists_callback fs_filename_exists;
	public ALLEGRO_FS_INTERFACE.fs_remove_filename_callback fs_remove_filename;
	public ALLEGRO_FS_INTERFACE.fs_get_current_directory_callback fs_get_current_directory;
	public ALLEGRO_FS_INTERFACE.fs_change_directory_callback fs_change_directory;
	public ALLEGRO_FS_INTERFACE.fs_make_directory_callback fs_make_directory;
	public ALLEGRO_FS_INTERFACE.fs_open_file_callback fs_open_file;
	public interface fs_create_entry_callback extends Callback {
		ALLEGRO_FS_ENTRY apply(Pointer path);
	};
	public interface fs_destroy_entry_callback extends Callback {
		void apply(ALLEGRO_FS_ENTRY e);
	};
	public interface fs_entry_name_callback extends Callback {
		String apply(ALLEGRO_FS_ENTRY e);
	};
	public interface fs_update_entry_callback extends Callback {
		byte apply(ALLEGRO_FS_ENTRY e);
	};
	public interface fs_entry_mode_callback extends Callback {
		int apply(ALLEGRO_FS_ENTRY e);
	};
	public interface fs_entry_atime_callback extends Callback {
		/**
		 * <i>native declaration : include\allegro5\fshook.h</i><br>
		 * Conversion Error : time_t (Primitive without known type for this runtime: NativeTime)
		 */
	};
	public interface fs_entry_mtime_callback extends Callback {
		/**
		 * <i>native declaration : include\allegro5\fshook.h</i><br>
		 * Conversion Error : time_t (Primitive without known type for this runtime: NativeTime)
		 */
	};
	public interface fs_entry_ctime_callback extends Callback {
		/**
		 * <i>native declaration : include\allegro5\fshook.h</i><br>
		 * Conversion Error : time_t (Primitive without known type for this runtime: NativeTime)
		 */
	};
	public interface off_t_callback extends Callback {
		int apply(ALLEGRO_FS_ENTRY e);
	};
	public interface fs_entry_exists_callback extends Callback {
		byte apply(ALLEGRO_FS_ENTRY e);
	};
	public interface fs_remove_entry_callback extends Callback {
		byte apply(ALLEGRO_FS_ENTRY e);
	};
	public interface fs_open_directory_callback extends Callback {
		byte apply(ALLEGRO_FS_ENTRY e);
	};
	public interface fs_read_directory_callback extends Callback {
		ALLEGRO_FS_ENTRY apply(ALLEGRO_FS_ENTRY e);
	};
	public interface fs_close_directory_callback extends Callback {
		byte apply(ALLEGRO_FS_ENTRY e);
	};
	public interface fs_filename_exists_callback extends Callback {
		byte apply(Pointer path);
	};
	public interface fs_remove_filename_callback extends Callback {
		byte apply(Pointer path);
	};
	public interface fs_get_current_directory_callback extends Callback {
		Pointer apply();
	};
	public interface fs_change_directory_callback extends Callback {
		byte apply(Pointer path);
	};
	public interface fs_make_directory_callback extends Callback {
		byte apply(Pointer path);
	};
	public interface fs_open_file_callback extends Callback {
		PointerByReference apply(ALLEGRO_FS_ENTRY e, Pointer mode);
	};
	public ALLEGRO_FS_INTERFACE() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("fs_create_entry", "fs_destroy_entry", "fs_entry_name", "fs_update_entry", "fs_entry_mode", "fs_entry_atime", "fs_entry_mtime", "fs_entry_ctime", "fs_entry_exists", "fs_remove_entry", "fs_open_directory", "fs_read_directory", "fs_close_directory", "fs_filename_exists", "fs_remove_filename", "fs_get_current_directory", "fs_change_directory", "fs_make_directory", "fs_open_file");
	}
	public ALLEGRO_FS_INTERFACE(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends ALLEGRO_FS_INTERFACE implements Structure.ByReference {
		
	};
	public static class ByValue extends ALLEGRO_FS_INTERFACE implements Structure.ByValue {
		
	};
}
