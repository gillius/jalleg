package org.gillius.jalleg.binding;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.ptr.DoubleByReference;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ALLEGRO_HAPTIC_PERIODIC_EFFECT extends Structure {
	public int waveform;
	public double period;
	public double magnitude;
	public double offset;
	public double phase;
	public ALLEGRO_HAPTIC_ENVELOPE envelope;
	public int custom_len;
	public DoubleByReference custom_data;
	public ALLEGRO_HAPTIC_PERIODIC_EFFECT() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("waveform", "period", "magnitude", "offset", "phase", "envelope", "custom_len", "custom_data");
	}
	public ALLEGRO_HAPTIC_PERIODIC_EFFECT(int waveform, double period, double magnitude, double offset, double phase, ALLEGRO_HAPTIC_ENVELOPE envelope, int custom_len, DoubleByReference custom_data) {
		super();
		this.waveform = waveform;
		this.period = period;
		this.magnitude = magnitude;
		this.offset = offset;
		this.phase = phase;
		this.envelope = envelope;
		this.custom_len = custom_len;
		this.custom_data = custom_data;
	}
	public ALLEGRO_HAPTIC_PERIODIC_EFFECT(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends ALLEGRO_HAPTIC_PERIODIC_EFFECT implements Structure.ByReference {
		
	};
	public static class ByValue extends ALLEGRO_HAPTIC_PERIODIC_EFFECT implements Structure.ByValue {
		
	};
}
