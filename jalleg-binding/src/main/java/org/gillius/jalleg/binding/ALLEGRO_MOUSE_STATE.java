/*
 * Copyright 2016 Jason Winnebeck
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.gillius.jalleg.binding;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.ptr.PointerByReference;
import org.gillius.jalleg.binding.AllegroLibrary.ALLEGRO_DISPLAY;

import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ALLEGRO_MOUSE_STATE extends Structure {
	public int x;
	public int y;
	public int z;
	public int w;
	public int[] more_axes = new int[4];
	public int buttons;
	public float pressure;
	public ALLEGRO_DISPLAY display;
	public ALLEGRO_MOUSE_STATE() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("x", "y", "z", "w", "more_axes", "buttons", "pressure", "display");
	}
	public ALLEGRO_MOUSE_STATE(int x, int y, int z, int w, int more_axes[], int buttons, float pressure, ALLEGRO_DISPLAY display) {
		super();
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
		if ((more_axes.length != this.more_axes.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.more_axes = more_axes;
		this.buttons = buttons;
		this.pressure = pressure;
		this.display = display;
	}
	public ALLEGRO_MOUSE_STATE(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends ALLEGRO_MOUSE_STATE implements Structure.ByReference { }
	public static class ByValue extends ALLEGRO_MOUSE_STATE implements Structure.ByValue { }
}
